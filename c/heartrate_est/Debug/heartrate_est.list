
heartrate_est.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  00007078  2**0
                  CONTENTS
  4 .ARM          00000000  08005da0  08005da0  00007078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da0  08005da0  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005da4  08005da4  00006da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005da8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c8  20000078  08005e20  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  08005e20  00007640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a78e  00000000  00000000  000070a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad7  00000000  00000000  0001182f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00013308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d8  00000000  00000000  00013d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c4  00000000  00000000  000144f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d514  00000000  00000000  0002c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f7a  00000000  00000000  00039cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  000c0c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c4168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cd0 	.word	0x08005cd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005cd0 	.word	0x08005cd0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <filter>:
 */
#include <stdint.h>
#include <math.h>
#include "algorithm.h"

void filter(uint32_t signal[], float output[], uint8_t signal_len, float prev_input[], float prev_out[]){
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b090      	sub	sp, #64	@ 0x40
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	71fb      	strb	r3, [r7, #7]
	float b[5] = {0.00554272f, 0.0f, -0.01108543f, 0.0f, 0.00554272f};
 80010c0:	4b66      	ldr	r3, [pc, #408]	@ (800125c <filter+0x1ac>)
 80010c2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80010c6:	461d      	mov	r5, r3
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	6023      	str	r3, [r4, #0]
	float a[5] = {1.0f, -3.76742617f, 5.33686791f, -3.37021291f, 0.80080265f};
 80010d0:	4b63      	ldr	r3, [pc, #396]	@ (8001260 <filter+0x1b0>)
 80010d2:	f107 0410 	add.w	r4, r7, #16
 80010d6:	461d      	mov	r5, r3
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	6023      	str	r3, [r4, #0]
	float sum;
	uint8_t i, j;

	for (i = 0; i < signal_len; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80010e6:	e0ae      	b.n	8001246 <filter+0x196>
		sum = 0.0f;
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

		for (j = 4; j > 0; j--) {
 80010ee:	2304      	movs	r3, #4
 80010f0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80010f4:	e013      	b.n	800111e <filter+0x6e>
			prev_input[j] = prev_input[j - 1];
 80010f6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80010fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010fe:	3b01      	subs	r3, #1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	6839      	ldr	r1, [r7, #0]
 800110e:	440b      	add	r3, r1
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	601a      	str	r2, [r3, #0]
		for (j = 4; j > 0; j--) {
 8001114:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001118:	3b01      	subs	r3, #1
 800111a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800111e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1e7      	bne.n	80010f6 <filter+0x46>
		}
		prev_input[0] = (float)signal[i] * -1.0f;
 8001126:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fd9e 	bl	8000c74 <__aeabi_ui2f>
 8001138:	4603      	mov	r3, r0
 800113a:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	601a      	str	r2, [r3, #0]

		for (j = 0; j < 5; j++) {
 8001142:	2300      	movs	r3, #0
 8001144:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001148:	e01b      	b.n	8001182 <filter+0xd2>
			sum += b[j] * prev_input[j];
 800114a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	3340      	adds	r3, #64	@ 0x40
 8001152:	443b      	add	r3, r7
 8001154:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8001158:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fddd 	bl	8000d24 <__aeabi_fmul>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001170:	f7ff fcd0 	bl	8000b14 <__addsf3>
 8001174:	4603      	mov	r3, r0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for (j = 0; j < 5; j++) {
 8001178:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800117c:	3301      	adds	r3, #1
 800117e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001182:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001186:	2b04      	cmp	r3, #4
 8001188:	d9df      	bls.n	800114a <filter+0x9a>
		}

		for (j = 1; j < 5; j++) {
 800118a:	2301      	movs	r3, #1
 800118c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001190:	e01e      	b.n	80011d0 <filter+0x120>
			sum -= a[j] * prev_out[j - 1];
 8001192:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	3340      	adds	r3, #64	@ 0x40
 800119a:	443b      	add	r3, r7
 800119c:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80011a0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80011a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80011a8:	3b01      	subs	r3, #1
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80011ae:	4413      	add	r3, r2
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fdb6 	bl	8000d24 <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011be:	f7ff fca7 	bl	8000b10 <__aeabi_fsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for (j = 1; j < 5; j++) {
 80011c6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80011ca:	3301      	adds	r3, #1
 80011cc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80011d0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d9dc      	bls.n	8001192 <filter+0xe2>
		}

		sum /= a[0];
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4619      	mov	r1, r3
 80011dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011de:	f7ff fe55 	bl	8000e8c <__aeabi_fdiv>
 80011e2:	4603      	mov	r3, r0
 80011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		output[i] = sum;
 80011e6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011f2:	601a      	str	r2, [r3, #0]

		for (j = 4; j > 0; j--) {
 80011f4:	2304      	movs	r3, #4
 80011f6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80011fa:	e013      	b.n	8001224 <filter+0x174>
			prev_out[j] = prev_out[j - 1];
 80011fc:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001204:	3b01      	subs	r3, #1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800120a:	441a      	add	r2, r3
 800120c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001214:	440b      	add	r3, r1
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	601a      	str	r2, [r3, #0]
		for (j = 4; j > 0; j--) {
 800121a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800121e:	3b01      	subs	r3, #1
 8001220:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001224:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e7      	bne.n	80011fc <filter+0x14c>
		}
		prev_out[0] = output[i];
 800122c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4413      	add	r3, r2
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800123a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < signal_len; i++) {
 800123c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001240:	3301      	adds	r3, #1
 8001242:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001246:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	429a      	cmp	r2, r3
 800124e:	f4ff af4b 	bcc.w	80010e8 <filter+0x38>
	}
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3740      	adds	r7, #64	@ 0x40
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	08005ce8 	.word	0x08005ce8
 8001260:	08005cfc 	.word	0x08005cfc

08001264 <moving_avg_and_dtr>:
//		else
//			out[i] = signal_filt[i] - sum;
//	}
//}

void moving_avg_and_dtr(float signal_filt[], float out[], uint8_t signal_len, uint8_t w, uint8_t dtr) {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	460b      	mov	r3, r1
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	4613      	mov	r3, r2
 8001278:	71bb      	strb	r3, [r7, #6]
    uint8_t half_window = (w - 1) / 2;
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	3b01      	subs	r3, #1
 800127e:	0fda      	lsrs	r2, r3, #31
 8001280:	4413      	add	r3, r2
 8001282:	105b      	asrs	r3, r3, #1
 8001284:	74bb      	strb	r3, [r7, #18]

    for (int i = 0; i < signal_len; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e059      	b.n	8001340 <moving_avg_and_dtr+0xdc>
        uint8_t start_index = (i - half_window) > 0 ? (i - half_window) : 0;
 800128c:	7cbb      	ldrb	r3, [r7, #18]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001296:	747b      	strb	r3, [r7, #17]
        uint8_t end_index = (i + half_window) < signal_len ? (i + half_window) : signal_len - 1;
 8001298:	7cba      	ldrb	r2, [r7, #18]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	441a      	add	r2, r3
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	da05      	bge.n	80012b0 <moving_avg_and_dtr+0x4c>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	4413      	add	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	e002      	b.n	80012b6 <moving_avg_and_dtr+0x52>
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	743b      	strb	r3, [r7, #16]

        uint8_t count = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	76fb      	strb	r3, [r7, #27]
        float sum = 0;
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
        for (uint8_t i = start_index; i<=end_index; i++ ) {
 80012c2:	7c7b      	ldrb	r3, [r7, #17]
 80012c4:	74fb      	strb	r3, [r7, #19]
 80012c6:	e010      	b.n	80012ea <moving_avg_and_dtr+0x86>
            sum += signal_filt[i];
 80012c8:	7cfb      	ldrb	r3, [r7, #19]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff fc1d 	bl	8000b14 <__addsf3>
 80012da:	4603      	mov	r3, r0
 80012dc:	617b      	str	r3, [r7, #20]
            count++;
 80012de:	7efb      	ldrb	r3, [r7, #27]
 80012e0:	3301      	adds	r3, #1
 80012e2:	76fb      	strb	r3, [r7, #27]
        for (uint8_t i = start_index; i<=end_index; i++ ) {
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	3301      	adds	r3, #1
 80012e8:	74fb      	strb	r3, [r7, #19]
 80012ea:	7cfa      	ldrb	r2, [r7, #19]
 80012ec:	7c3b      	ldrb	r3, [r7, #16]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d9ea      	bls.n	80012c8 <moving_avg_and_dtr+0x64>
        }
        sum /= (float)count;
 80012f2:	7efb      	ldrb	r3, [r7, #27]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fcbd 	bl	8000c74 <__aeabi_ui2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4619      	mov	r1, r3
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff fdc4 	bl	8000e8c <__aeabi_fdiv>
 8001304:	4603      	mov	r3, r0
 8001306:	617b      	str	r3, [r7, #20]

        if (dtr != 0)
 8001308:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00e      	beq.n	800132e <moving_avg_and_dtr+0xca>
        	out[i] = signal_filt[i] - sum;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	18d4      	adds	r4, r2, r3
 8001322:	6979      	ldr	r1, [r7, #20]
 8001324:	f7ff fbf4 	bl	8000b10 <__aeabi_fsub>
 8001328:	4603      	mov	r3, r0
 800132a:	6023      	str	r3, [r4, #0]
 800132c:	e005      	b.n	800133a <moving_avg_and_dtr+0xd6>
        else
        	out[i] = sum;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < signal_len; i++) {
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	dba1      	blt.n	800128c <moving_avg_and_dtr+0x28>
    }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <peak_detection>:

void peak_detection(float signal[], uint8_t signal_len, uint16_t peak_list[], uint8_t *num_peaks, uint8_t seg_count, uint8_t w1, uint8_t w2, float beta) {
 8001352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001356:	b0b9      	sub	sp, #228	@ 0xe4
 8001358:	af02      	add	r7, sp, #8
 800135a:	6778      	str	r0, [r7, #116]	@ 0x74
 800135c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800135e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001360:	460b      	mov	r3, r1
 8001362:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8001366:	466b      	mov	r3, sp
 8001368:	461e      	mov	r6, r3
	float Z[signal_len];
 800136a:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 800136e:	460b      	mov	r3, r1
 8001370:	3b01      	subs	r3, #1
 8001372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001376:	b2cb      	uxtb	r3, r1
 8001378:	2200      	movs	r2, #0
 800137a:	461c      	mov	r4, r3
 800137c:	4615      	mov	r5, r2
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	016b      	lsls	r3, r5, #5
 8001388:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800138c:	0162      	lsls	r2, r4, #5
 800138e:	b2cb      	uxtb	r3, r1
 8001390:	2200      	movs	r2, #0
 8001392:	4698      	mov	r8, r3
 8001394:	4691      	mov	r9, r2
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80013a2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80013a6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80013aa:	460b      	mov	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	3307      	adds	r3, #7
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	ebad 0d03 	sub.w	sp, sp, r3
 80013b8:	ab02      	add	r3, sp, #8
 80013ba:	3303      	adds	r3, #3
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	float y[signal_len];
 80013c4:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 80013c8:	460b      	mov	r3, r1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80013d0:	b2cb      	uxtb	r3, r1
 80013d2:	2200      	movs	r2, #0
 80013d4:	469a      	mov	sl, r3
 80013d6:	4693      	mov	fp, r2
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80013e4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80013e8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80013ec:	b2cb      	uxtb	r3, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80013f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001400:	4628      	mov	r0, r5
 8001402:	0143      	lsls	r3, r0, #5
 8001404:	4620      	mov	r0, r4
 8001406:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800140a:	4620      	mov	r0, r4
 800140c:	0142      	lsls	r2, r0, #5
 800140e:	460b      	mov	r3, r1
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	3307      	adds	r3, #7
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	ebad 0d03 	sub.w	sp, sp, r3
 800141c:	ab02      	add	r3, sp, #8
 800141e:	3303      	adds	r3, #3
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float ma_peak[signal_len];
 8001428:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 800142c:	460b      	mov	r3, r1
 800142e:	3b01      	subs	r3, #1
 8001430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001434:	b2cb      	uxtb	r3, r1
 8001436:	2200      	movs	r2, #0
 8001438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800143a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001448:	4628      	mov	r0, r5
 800144a:	0143      	lsls	r3, r0, #5
 800144c:	4620      	mov	r0, r4
 800144e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001452:	4620      	mov	r0, r4
 8001454:	0142      	lsls	r2, r0, #5
 8001456:	b2cb      	uxtb	r3, r1
 8001458:	2200      	movs	r2, #0
 800145a:	653b      	str	r3, [r7, #80]	@ 0x50
 800145c:	657a      	str	r2, [r7, #84]	@ 0x54
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800146a:	4628      	mov	r0, r5
 800146c:	0143      	lsls	r3, r0, #5
 800146e:	4620      	mov	r0, r4
 8001470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001474:	4620      	mov	r0, r4
 8001476:	0142      	lsls	r2, r0, #5
 8001478:	460b      	mov	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	3307      	adds	r3, #7
 800147e:	08db      	lsrs	r3, r3, #3
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	ebad 0d03 	sub.w	sp, sp, r3
 8001486:	ab02      	add	r3, sp, #8
 8001488:	3303      	adds	r3, #3
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	float ma_beat[signal_len];
 8001492:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001496:	460b      	mov	r3, r1
 8001498:	3b01      	subs	r3, #1
 800149a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800149e:	b2cb      	uxtb	r3, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80014b2:	4628      	mov	r0, r5
 80014b4:	0143      	lsls	r3, r0, #5
 80014b6:	4620      	mov	r0, r4
 80014b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014bc:	4620      	mov	r0, r4
 80014be:	0142      	lsls	r2, r0, #5
 80014c0:	b2cb      	uxtb	r3, r1
 80014c2:	2200      	movs	r2, #0
 80014c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80014c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80014d4:	4628      	mov	r0, r5
 80014d6:	0143      	lsls	r3, r0, #5
 80014d8:	4620      	mov	r0, r4
 80014da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014de:	4620      	mov	r0, r4
 80014e0:	0142      	lsls	r2, r0, #5
 80014e2:	460b      	mov	r3, r1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	3307      	adds	r3, #7
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	ebad 0d03 	sub.w	sp, sp, r3
 80014f0:	ab02      	add	r3, sp, #8
 80014f2:	3303      	adds	r3, #3
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	uint8_t block_of_interest[signal_len];
 80014fc:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001500:	460b      	mov	r3, r1
 8001502:	3b01      	subs	r3, #1
 8001504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001508:	b2cb      	uxtb	r3, r1
 800150a:	2200      	movs	r2, #0
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800150e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800151c:	4628      	mov	r0, r5
 800151e:	00c3      	lsls	r3, r0, #3
 8001520:	4620      	mov	r0, r4
 8001522:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001526:	4620      	mov	r0, r4
 8001528:	00c2      	lsls	r2, r0, #3
 800152a:	b2cb      	uxtb	r3, r1
 800152c:	2200      	movs	r2, #0
 800152e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001530:	637a      	str	r2, [r7, #52]	@ 0x34
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800153e:	4628      	mov	r0, r5
 8001540:	00c3      	lsls	r3, r0, #3
 8001542:	4620      	mov	r0, r4
 8001544:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001548:	4620      	mov	r0, r4
 800154a:	00c2      	lsls	r2, r0, #3
 800154c:	460b      	mov	r3, r1
 800154e:	3307      	adds	r3, #7
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	ebad 0d03 	sub.w	sp, sp, r3
 8001558:	ab02      	add	r3, sp, #8
 800155a:	3300      	adds	r3, #0
 800155c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	uint8_t BOI_idx[signal_len];
 8001560:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001564:	460b      	mov	r3, r1
 8001566:	3b01      	subs	r3, #1
 8001568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800156c:	b2cb      	uxtb	r3, r1
 800156e:	2200      	movs	r2, #0
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001580:	4628      	mov	r0, r5
 8001582:	00c3      	lsls	r3, r0, #3
 8001584:	4620      	mov	r0, r4
 8001586:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800158a:	4620      	mov	r0, r4
 800158c:	00c2      	lsls	r2, r0, #3
 800158e:	b2cb      	uxtb	r3, r1
 8001590:	2200      	movs	r2, #0
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	627a      	str	r2, [r7, #36]	@ 0x24
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015a2:	4628      	mov	r0, r5
 80015a4:	00c3      	lsls	r3, r0, #3
 80015a6:	4620      	mov	r0, r4
 80015a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015ac:	4620      	mov	r0, r4
 80015ae:	00c2      	lsls	r2, r0, #3
 80015b0:	460b      	mov	r3, r1
 80015b2:	3307      	adds	r3, #7
 80015b4:	08db      	lsrs	r3, r3, #3
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	ebad 0d03 	sub.w	sp, sp, r3
 80015bc:	ab02      	add	r3, sp, #8
 80015be:	3300      	adds	r3, #0
 80015c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	uint8_t BOI_width_idx[signal_len];
 80015c4:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 80015c8:	460b      	mov	r3, r1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015d0:	b2cb      	uxtb	r3, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	61fa      	str	r2, [r7, #28]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80015e4:	4628      	mov	r0, r5
 80015e6:	00c3      	lsls	r3, r0, #3
 80015e8:	4620      	mov	r0, r4
 80015ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015ee:	4620      	mov	r0, r4
 80015f0:	00c2      	lsls	r2, r0, #3
 80015f2:	b2cb      	uxtb	r3, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	617a      	str	r2, [r7, #20]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001606:	4628      	mov	r0, r5
 8001608:	00c3      	lsls	r3, r0, #3
 800160a:	4620      	mov	r0, r4
 800160c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001610:	4620      	mov	r0, r4
 8001612:	00c2      	lsls	r2, r0, #3
 8001614:	460b      	mov	r3, r1
 8001616:	3307      	adds	r3, #7
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	ebad 0d03 	sub.w	sp, sp, r3
 8001620:	ab02      	add	r3, sp, #8
 8001622:	3300      	adds	r3, #0
 8001624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	uint8_t i, j;

	for (i = 0; i < signal_len; i++) {
 8001628:	2300      	movs	r3, #0
 800162a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800162e:	e038      	b.n	80016a2 <peak_detection+0x350>
		Z[i] = (signal[i] > 0) ? signal[i] : 0.0f;
 8001630:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001638:	4413      	add	r3, r2
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd2b 	bl	800109c <__aeabi_fcmpgt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <peak_detection+0x308>
 800164c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001654:	4413      	add	r3, r2
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	e001      	b.n	800165e <peak_detection+0x30c>
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	f897 10d7 	ldrb.w	r1, [r7, #215]	@ 0xd7
 8001662:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001666:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		y[i] = Z[i] * Z[i];
 800166a:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 800166e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001672:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001676:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 800167a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	f897 40d7 	ldrb.w	r4, [r7, #215]	@ 0xd7
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fb4c 	bl	8000d24 <__aeabi_fmul>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001694:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (i = 0; i < signal_len; i++) {
 8001698:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800169c:	3301      	adds	r3, #1
 800169e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80016a2:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80016a6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3c0      	bcc.n	8001630 <peak_detection+0x2de>
	}

	moving_avg_and_dtr(y, ma_peak, signal_len, w1, 0);
 80016ae:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 80016b2:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80016b6:	2100      	movs	r1, #0
 80016b8:	9100      	str	r1, [sp, #0]
 80016ba:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80016be:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80016c2:	f7ff fdcf 	bl	8001264 <moving_avg_and_dtr>
	moving_avg_and_dtr(y, ma_beat, signal_len, w2, 0);
 80016c6:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80016ca:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80016ce:	2100      	movs	r1, #0
 80016d0:	9100      	str	r1, [sp, #0]
 80016d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80016d6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80016da:	f7ff fdc3 	bl	8001264 <moving_avg_and_dtr>

	float z_mean = 0.0f;
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	for (i = 0; i < signal_len; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80016ec:	e012      	b.n	8001714 <peak_detection+0x3c2>
		z_mean += y[i];
 80016ee:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80016f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fa:	4619      	mov	r1, r3
 80016fc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001700:	f7ff fa08 	bl	8000b14 <__addsf3>
 8001704:	4603      	mov	r3, r0
 8001706:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	for (i = 0; i < signal_len; i++) {
 800170a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800170e:	3301      	adds	r3, #1
 8001710:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001714:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 8001718:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800171c:	429a      	cmp	r2, r3
 800171e:	d3e6      	bcc.n	80016ee <peak_detection+0x39c>
	}
	z_mean /= (float)signal_len;
 8001720:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff faa5 	bl	8000c74 <__aeabi_ui2f>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001732:	f7ff fbab 	bl	8000e8c <__aeabi_fdiv>
 8001736:	4603      	mov	r3, r0
 8001738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	float alpha = beta * z_mean;
 800173c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001740:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001744:	f7ff faee 	bl	8000d24 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float thr1[signal_len];
 800174e:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001752:	460b      	mov	r3, r1
 8001754:	3b01      	subs	r3, #1
 8001756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800175a:	b2cb      	uxtb	r3, r1
 800175c:	2200      	movs	r2, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	60fa      	str	r2, [r7, #12]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800176e:	4628      	mov	r0, r5
 8001770:	0143      	lsls	r3, r0, #5
 8001772:	4620      	mov	r0, r4
 8001774:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001778:	4620      	mov	r0, r4
 800177a:	0142      	lsls	r2, r0, #5
 800177c:	b2cb      	uxtb	r3, r1
 800177e:	2200      	movs	r2, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001790:	4628      	mov	r0, r5
 8001792:	0143      	lsls	r3, r0, #5
 8001794:	4620      	mov	r0, r4
 8001796:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800179a:	4620      	mov	r0, r4
 800179c:	0142      	lsls	r2, r0, #5
 800179e:	460b      	mov	r3, r1
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	3307      	adds	r3, #7
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	ebad 0d03 	sub.w	sp, sp, r3
 80017ac:	ab02      	add	r3, sp, #8
 80017ae:	3303      	adds	r3, #3
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	for (i = 0; i < signal_len; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80017be:	e017      	b.n	80017f0 <peak_detection+0x49e>
		thr1[i] = ma_beat[i] + alpha;
 80017c0:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80017c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	f897 40d7 	ldrb.w	r4, [r7, #215]	@ 0xd7
 80017d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f99d 	bl	8000b14 <__addsf3>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (i = 0; i < signal_len; i++) {
 80017e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80017ea:	3301      	adds	r3, #1
 80017ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80017f0:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80017f4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3e1      	bcc.n	80017c0 <peak_detection+0x46e>
	}

	for (i = 0; i < signal_len; i++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001802:	e021      	b.n	8001848 <peak_detection+0x4f6>
		block_of_interest[i] = (ma_peak[i] > thr1[i]) ? 1 : 0;
 8001804:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 8001808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800180c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001810:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 8001814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	2201      	movs	r2, #1
 800181e:	4614      	mov	r4, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff fc3b 	bl	800109c <__aeabi_fcmpgt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <peak_detection+0x4de>
 800182c:	2300      	movs	r3, #0
 800182e:	461c      	mov	r4, r3
 8001830:	b2e2      	uxtb	r2, r4
 8001832:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001836:	4611      	mov	r1, r2
 8001838:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800183c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < signal_len; i++) {
 800183e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001842:	3301      	adds	r3, #1
 8001844:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001848:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 800184c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001850:	429a      	cmp	r2, r3
 8001852:	d3d7      	bcc.n	8001804 <peak_detection+0x4b2>
	}

	uint8_t thr2 = w1;
 8001854:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 8001858:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t num_boi = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

    for (i = 0; i < signal_len; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001868:	e016      	b.n	8001898 <peak_detection+0x546>
        if (block_of_interest[i] > 0) {
 800186a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800186e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <peak_detection+0x53c>
            BOI_idx[num_boi++] = i;
 8001878:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	f887 20cf 	strb.w	r2, [r7, #207]	@ 0xcf
 8001882:	4619      	mov	r1, r3
 8001884:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001888:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 800188c:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < signal_len; i++) {
 800188e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001892:	3301      	adds	r3, #1
 8001894:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001898:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 800189c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3e2      	bcc.n	800186a <peak_detection+0x518>
        }
    }

    uint8_t BOI_count = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
    for (i = 0; i < num_boi - 1; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80018b0:	e01e      	b.n	80018f0 <peak_detection+0x59e>
        if (BOI_idx[i+1] - BOI_idx[i] > 1) {
 80018b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80018b6:	3301      	adds	r3, #1
 80018b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	4619      	mov	r1, r3
 80018c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80018c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	1acb      	subs	r3, r1, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	dd0a      	ble.n	80018e6 <peak_detection+0x594>
            BOI_width_idx[BOI_count++] = i;
 80018d0:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	f887 20ce 	strb.w	r2, [r7, #206]	@ 0xce
 80018da:	4619      	mov	r1, r3
 80018dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018e0:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80018e4:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < num_boi - 1; i++) {
 80018e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80018ea:	3301      	adds	r3, #1
 80018ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80018f0:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80018f4:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80018f8:	3b01      	subs	r3, #1
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbd9      	blt.n	80018b2 <peak_detection+0x560>
        }
    }
    BOI_width_idx[BOI_count++] = num_boi - 1;
 80018fe:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	f887 20ce 	strb.w	r2, [r7, #206]	@ 0xce
 8001908:	461a      	mov	r2, r3
 800190a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800190e:	3b01      	subs	r3, #1
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001916:	5499      	strb	r1, [r3, r2]

    for (i = 0; i < BOI_count; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800191e:	e07c      	b.n	8001a1a <peak_detection+0x6c8>
        uint8_t left_idx = (i == 0) ? 0 : BOI_width_idx[i - 1] + 1;
 8001920:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <peak_detection+0x5e8>
 8001928:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800192c:	3b01      	subs	r3, #1
 800192e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	3301      	adds	r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	e000      	b.n	800193c <peak_detection+0x5ea>
 800193a:	2300      	movs	r3, #0
 800193c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        uint8_t right_idx = BOI_width_idx[i];
 8001940:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001944:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
        uint8_t BOI_width = right_idx - left_idx;
 800194e:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 8001952:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

        if (BOI_width >= thr2) {
 800195c:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 8001960:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001964:	429a      	cmp	r2, r3
 8001966:	d353      	bcc.n	8001a10 <peak_detection+0x6be>
            float max_val = 0.0;
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            int peak_idx = left_idx;
 8001970:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001974:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            for (j = BOI_idx[left_idx]; j <= BOI_idx[right_idx]; j++) {
 8001978:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800197c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
 8001986:	e01e      	b.n	80019c6 <peak_detection+0x674>
                if (y[j] > max_val) {
 8001988:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 800198c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	4619      	mov	r1, r3
 8001996:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800199a:	f7ff fb61 	bl	8001060 <__aeabi_fcmplt>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <peak_detection+0x66a>
                    max_val = y[j];
 80019a4:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 80019a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                    peak_idx = j;
 80019b4:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 80019b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            for (j = BOI_idx[left_idx]; j <= BOI_idx[right_idx]; j++) {
 80019bc:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 80019c0:	3301      	adds	r3, #1
 80019c2:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
 80019c6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80019ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d9d7      	bls.n	8001988 <peak_detection+0x636>
                }
            }
            peak_list[(*num_peaks)++] = peak_idx + (seg_count * OFFSET);
 80019d8:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	0091      	lsls	r1, r2, #2
 80019e8:	461a      	mov	r2, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	b299      	uxth	r1, r3
 80019f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	1c58      	adds	r0, r3, #1
 80019fe:	b2c4      	uxtb	r4, r0
 8001a00:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001a02:	7004      	strb	r4, [r0, #0]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001a08:	4403      	add	r3, r0
 8001a0a:	440a      	add	r2, r1
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < BOI_count; i++) {
 8001a10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001a14:	3301      	adds	r3, #1
 8001a16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001a1a:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 8001a1e:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8001a22:	429a      	cmp	r2, r3
 8001a24:	f4ff af7c 	bcc.w	8001920 <peak_detection+0x5ce>
 8001a28:	46b5      	mov	sp, r6
        }
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	37dc      	adds	r7, #220	@ 0xdc
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a34:	0000      	movs	r0, r0
	...

08001a38 <hr_vo2_cal>:
//    for (i = 0; i < num_peaks; i++) {
//    	peak_list[i] = 0;
//    }
//}

void hr_vo2_cal(uint16_t peak_list[], uint8_t num_peaks, uint8_t *hr_rest, uint8_t *vo2) {
 8001a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3c:	b093      	sub	sp, #76	@ 0x4c
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6178      	str	r0, [r7, #20]
 8001a42:	60fa      	str	r2, [r7, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	460b      	mov	r3, r1
 8001a48:	74fb      	strb	r3, [r7, #19]
 8001a4a:	466b      	mov	r3, sp
 8001a4c:	461e      	mov	r6, r3
    if (num_peaks <= 1) {
 8001a4e:	7cfb      	ldrb	r3, [r7, #19]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f240 81a9 	bls.w	8001da8 <hr_vo2_cal+0x370>
        return;
    }
    *hr_rest = 0;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
    *vo2 = 0;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    uint8_t N = num_peaks - 1;
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    uint8_t ppi_list[N];
 8001a6a:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8001a6e:	460b      	mov	r3, r1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a74:	b2cb      	uxtb	r3, r1
 8001a76:	2200      	movs	r2, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	00c3      	lsls	r3, r0, #3
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	00c2      	lsls	r2, r0, #3
 8001a92:	b2cb      	uxtb	r3, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	469a      	mov	sl, r3
 8001a98:	4693      	mov	fp, r2
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aa6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	ebad 0d03 	sub.w	sp, sp, r3
 8001aba:	466b      	mov	r3, sp
 8001abc:	3300      	adds	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
    float di[N];
 8001ac0:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aca:	b2cb      	uxtb	r3, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4691      	mov	r9, r2
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001ade:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001ae2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001ae6:	b2cb      	uxtb	r3, r1
 8001ae8:	2200      	movs	r2, #0
 8001aea:	461c      	mov	r4, r3
 8001aec:	4615      	mov	r5, r2
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	016b      	lsls	r3, r5, #5
 8001af8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001afc:	0162      	lsls	r2, r4, #5
 8001afe:	460b      	mov	r3, r1
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	3307      	adds	r3, #7
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0c:	466b      	mov	r3, sp
 8001b0e:	3303      	adds	r3, #3
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    float mean_ppi = 0.0f;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    float stddev = 0.0f;
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
    float Erd = 0.0f;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
    uint16_t sum_ppi = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    // uint8_t valid_sum = 0;
    uint8_t valid_ppi = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t i;

    for (i = 1; i < num_peaks; i++) {
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001b3a:	e027      	b.n	8001b8c <hr_vo2_cal+0x154>
        ppi_list[i - 1] = peak_list[i] - peak_list[i - 1];
 8001b3c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4413      	add	r3, r2
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b2d9      	uxtb	r1, r3
 8001b4a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b4e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001b52:	3b01      	subs	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4413      	add	r3, r2
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b62:	3b01      	subs	r3, #1
 8001b64:	1a8a      	subs	r2, r1, r2
 8001b66:	b2d1      	uxtb	r1, r2
 8001b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b6a:	54d1      	strb	r1, [r2, r3]
        sum_ppi += ppi_list[i - 1];
 8001b6c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b70:	3b01      	subs	r3, #1
 8001b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    for (i = 1; i < num_peaks; i++) {
 8001b82:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b86:	3301      	adds	r3, #1
 8001b88:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001b8c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3d2      	bcc.n	8001b3c <hr_vo2_cal+0x104>
    }

    mean_ppi = (float)sum_ppi / N;
 8001b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f86a 	bl	8000c74 <__aeabi_ui2f>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f868 	bl	8000c7c <__aeabi_i2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff f96b 	bl	8000e8c <__aeabi_fdiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24

    float sum_di = 0.0f;
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	643b      	str	r3, [r7, #64]	@ 0x40
    for (i = 0; i < N; i++) {
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001bc6:	e02b      	b.n	8001c20 <hr_vo2_cal+0x1e8>
        di[i] = (float)ppi_list[i] - mean_ppi;
 8001bc8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f84f 	bl	8000c74 <__aeabi_ui2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f897 4044 	ldrb.w	r4, [r7, #68]	@ 0x44
 8001bdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe ff96 	bl	8000b10 <__aeabi_fsub>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        sum_di += di[i] * di[i];
 8001bee:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001bf8:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7ff f88e 	bl	8000d24 <__aeabi_fmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c0e:	f7fe ff81 	bl	8000b14 <__addsf3>
 8001c12:	4603      	mov	r3, r0
 8001c14:	643b      	str	r3, [r7, #64]	@ 0x40
    for (i = 0; i < N; i++) {
 8001c16:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001c20:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001c24:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3cd      	bcc.n	8001bc8 <hr_vo2_cal+0x190>
    }

    stddev = sqrt(sum_di / (N - 1));
 8001c2c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c30:	3b01      	subs	r3, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f822 	bl	8000c7c <__aeabi_i2f>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c3e:	f7ff f925 	bl	8000e8c <__aeabi_fdiv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fbe7 	bl	8000418 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f003 ff43 	bl	8005adc <sqrt>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ff03 	bl	8000a68 <__aeabi_d2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	623b      	str	r3, [r7, #32]
    Erd = 3 * (stddev / sqrt(N));
 8001c66:	6a38      	ldr	r0, [r7, #32]
 8001c68:	f7fe fbd6 	bl	8000418 <__aeabi_f2d>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	460d      	mov	r5, r1
 8001c70:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fbad 	bl	80003d4 <__aeabi_ui2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f003 ff2b 	bl	8005adc <sqrt>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	f7fe fd45 	bl	800071c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b48      	ldr	r3, [pc, #288]	@ (8001dc0 <hr_vo2_cal+0x388>)
 8001ca0:	f7fe fc12 	bl	80004c8 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe fedc 	bl	8000a68 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	61fb      	str	r3, [r7, #28]

    int instance_hr = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (i = 0; i < N; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001cbe:	e033      	b.n	8001d28 <hr_vo2_cal+0x2f0>
        if (fabs(di[i]) < Erd && fabs(di[i]) < MAX_DEVIATION) {
 8001cc0:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cce:	4619      	mov	r1, r3
 8001cd0:	69f8      	ldr	r0, [r7, #28]
 8001cd2:	f7ff f9e3 	bl	800109c <__aeabi_fcmpgt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <hr_vo2_cal+0x2e6>
 8001cdc:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cea:	4936      	ldr	r1, [pc, #216]	@ (8001dc4 <hr_vo2_cal+0x38c>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f9b7 	bl	8001060 <__aeabi_fcmplt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <hr_vo2_cal+0x2e6>
        	instance_hr += (uint8_t)(((FS * 60) / ppi_list[i]));
 8001cf8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d10:	4413      	add	r3, r2
 8001d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
            valid_ppi++;
 8001d14:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    for (i = 0; i < N; i++) {
 8001d1e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d22:	3301      	adds	r3, #1
 8001d24:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001d28:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001d2c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3c5      	bcc.n	8001cc0 <hr_vo2_cal+0x288>
        }
    }

    if (valid_ppi == 0) {
 8001d34:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d034      	beq.n	8001da6 <hr_vo2_cal+0x36e>
        return;
    }

    *hr_rest = instance_hr / valid_ppi;
 8001d3c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]
    *vo2 = (uint8_t)(15 * (208 - (0.7 *AGE)) / *hr_rest);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb4f 	bl	80003f4 <__aeabi_i2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	a117      	add	r1, pc, #92	@ (adr r1, 8001db8 <hr_vo2_cal+0x380>)
 8001d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d60:	f7fe fcdc 	bl	800071c <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe fe5c 	bl	8000a28 <__aeabi_d2uiz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_peaks; i++) {
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001d7e:	e00b      	b.n	8001d98 <hr_vo2_cal+0x360>
    	peak_list[i] = 0;
 8001d80:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4413      	add	r3, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_peaks; i++) {
 8001d8e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d92:	3301      	adds	r3, #1
 8001d94:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001d98:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3ee      	bcc.n	8001d80 <hr_vo2_cal+0x348>
 8001da2:	46b5      	mov	sp, r6
 8001da4:	e001      	b.n	8001daa <hr_vo2_cal+0x372>
        return;
 8001da6:	bf00      	nop
        return;
 8001da8:	46b5      	mov	sp, r6
    }
}
 8001daa:	374c      	adds	r7, #76	@ 0x4c
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	f3af 8000 	nop.w
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40a69200 	.word	0x40a69200
 8001dc0:	40080000 	.word	0x40080000
 8001dc4:	41200000 	.word	0x41200000

08001dc8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PUTCHAR_PROTOTYPE {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 100);
 8001dd0:	1d39      	adds	r1, r7, #4
 8001dd2:	2364      	movs	r3, #100	@ 0x64
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <__io_putchar+0x20>)
 8001dd8:	f002 fd5a 	bl	8004890 <HAL_UART_Transmit>
	return ch;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000013c 	.word	0x2000013c

08001dec <max30102_setup>:

void max30102_setup() {
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b097      	sub	sp, #92	@ 0x5c
 8001df0:	af14      	add	r7, sp, #80	@ 0x50
	uint8_t uch_dummy;
	maxim_max30102_reset();
 8001df2:	f000 fbb8 	bl	8002566 <maxim_max30102_reset>
	maxim_max30102_read_reg(hi2c1, REG_INTR_STATUS_1, &uch_dummy); // reads/clears the interrupt status register
 8001df6:	4c13      	ldr	r4, [pc, #76]	@ (8001e44 <max30102_setup+0x58>)
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	9312      	str	r3, [sp, #72]	@ 0x48
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9311      	str	r3, [sp, #68]	@ 0x44
 8001e00:	4668      	mov	r0, sp
 8001e02:	f104 0310 	add.w	r3, r4, #16
 8001e06:	2244      	movs	r2, #68	@ 0x44
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f003 f946 	bl	800509a <memcpy>
 8001e0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e12:	f000 fad3 	bl	80023bc <maxim_max30102_read_reg>
	maxim_max30102_read_reg(hi2c2, REG_INTR_STATUS_1, &uch_dummy);
 8001e16:	4c0c      	ldr	r4, [pc, #48]	@ (8001e48 <max30102_setup+0x5c>)
 8001e18:	1dfb      	adds	r3, r7, #7
 8001e1a:	9312      	str	r3, [sp, #72]	@ 0x48
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9311      	str	r3, [sp, #68]	@ 0x44
 8001e20:	4668      	mov	r0, sp
 8001e22:	f104 0310 	add.w	r3, r4, #16
 8001e26:	2244      	movs	r2, #68	@ 0x44
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f003 f936 	bl	800509a <memcpy>
 8001e2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e32:	f000 fac3 	bl	80023bc <maxim_max30102_read_reg>
	maxim_max30102_init();
 8001e36:	f000 fade 	bl	80023f6 <maxim_max30102_init>
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000094 	.word	0x20000094
 8001e48:	200000e8 	.word	0x200000e8

08001e4c <max30102_pre_read>:

void max30102_pre_read() {
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b097      	sub	sp, #92	@ 0x5c
 8001e50:	af14      	add	r7, sp, #80	@ 0x50
	uint8_t count = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint32_t dummy_value;
	while (count < 5) {
 8001e56:	e055      	b.n	8001f04 <max30102_pre_read+0xb8>

		printf(".\n");
 8001e58:	482e      	ldr	r0, [pc, #184]	@ (8001f14 <max30102_pre_read+0xc8>)
 8001e5a:	f002 ffc3 	bl	8004de4 <puts>

		for (i = 0; i < BUFFER_SIZE; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	e039      	b.n	8001ed8 <max30102_pre_read+0x8c>
			while (HAL_GPIO_ReadPin(GPIOB, PB12_IT_Pin) == GPIO_PIN_SET || HAL_GPIO_ReadPin(GPIOB, PB13_IT_Pin) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 8001e64:	bf00      	nop
 8001e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e6a:	482b      	ldr	r0, [pc, #172]	@ (8001f18 <max30102_pre_read+0xcc>)
 8001e6c:	f001 f83e 	bl	8002eec <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d0f7      	beq.n	8001e66 <max30102_pre_read+0x1a>
 8001e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e7a:	4827      	ldr	r0, [pc, #156]	@ (8001f18 <max30102_pre_read+0xcc>)
 8001e7c:	f001 f836 	bl	8002eec <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d0ef      	beq.n	8001e66 <max30102_pre_read+0x1a>
			maxim_max30102_read_fifo(hi2c1, (ir1 + i), &dummy_value); // ppg1
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <max30102_pre_read+0xd0>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4c24      	ldr	r4, [pc, #144]	@ (8001f20 <max30102_pre_read+0xd4>)
 8001e90:	463a      	mov	r2, r7
 8001e92:	9212      	str	r2, [sp, #72]	@ 0x48
 8001e94:	9311      	str	r3, [sp, #68]	@ 0x44
 8001e96:	4668      	mov	r0, sp
 8001e98:	f104 0310 	add.w	r3, r4, #16
 8001e9c:	2244      	movs	r2, #68	@ 0x44
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f003 f8fb 	bl	800509a <memcpy>
 8001ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea8:	f000 fad1 	bl	800244e <maxim_max30102_read_fifo>
			maxim_max30102_read_fifo(hi2c2, (ir2 + i), &dummy_value); // ppg2
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <max30102_pre_read+0xd8>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4c1c      	ldr	r4, [pc, #112]	@ (8001f28 <max30102_pre_read+0xdc>)
 8001eb6:	463a      	mov	r2, r7
 8001eb8:	9212      	str	r2, [sp, #72]	@ 0x48
 8001eba:	9311      	str	r3, [sp, #68]	@ 0x44
 8001ebc:	4668      	mov	r0, sp
 8001ebe:	f104 0310 	add.w	r3, r4, #16
 8001ec2:	2244      	movs	r2, #68	@ 0x44
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f003 f8e8 	bl	800509a <memcpy>
 8001eca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ece:	f000 fabe 	bl	800244e <maxim_max30102_read_fifo>
		for (i = 0; i < BUFFER_SIZE; i++) {
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	71bb      	strb	r3, [r7, #6]
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	2bc7      	cmp	r3, #199	@ 0xc7
 8001edc:	d9c2      	bls.n	8001e64 <max30102_pre_read+0x18>
		}
		filter(ir1, ir1filt, BUFFER_SIZE, prev_ir1, prev_ir1filt);
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <max30102_pre_read+0xe0>)
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <max30102_pre_read+0xe4>)
 8001ee4:	22c8      	movs	r2, #200	@ 0xc8
 8001ee6:	4913      	ldr	r1, [pc, #76]	@ (8001f34 <max30102_pre_read+0xe8>)
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <max30102_pre_read+0xd0>)
 8001eea:	f7ff f8e1 	bl	80010b0 <filter>
		filter(ir2, ir2filt, BUFFER_SIZE, prev_ir2, prev_ir2filt);
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <max30102_pre_read+0xec>)
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <max30102_pre_read+0xf0>)
 8001ef4:	22c8      	movs	r2, #200	@ 0xc8
 8001ef6:	4912      	ldr	r1, [pc, #72]	@ (8001f40 <max30102_pre_read+0xf4>)
 8001ef8:	480a      	ldr	r0, [pc, #40]	@ (8001f24 <max30102_pre_read+0xd8>)
 8001efa:	f7ff f8d9 	bl	80010b0 <filter>

		count++;
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	3301      	adds	r3, #1
 8001f02:	71fb      	strb	r3, [r7, #7]
	while (count < 5) {
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d9a6      	bls.n	8001e58 <max30102_pre_read+0xc>
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	08005d10 	.word	0x08005d10
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	20000184 	.word	0x20000184
 8001f20:	20000094 	.word	0x20000094
 8001f24:	200004a4 	.word	0x200004a4
 8001f28:	200000e8 	.word	0x200000e8
 8001f2c:	20001458 	.word	0x20001458
 8001f30:	20001444 	.word	0x20001444
 8001f34:	200007c4 	.word	0x200007c4
 8001f38:	20001480 	.word	0x20001480
 8001f3c:	2000146c 	.word	0x2000146c
 8001f40:	20000ae4 	.word	0x20000ae4

08001f44 <max30102_main_loop>:

// Takes samples from MAX30102.  Heart rate are calculated every ST seconds
void max30102_main_loop() {
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b097      	sub	sp, #92	@ 0x5c
 8001f48:	af14      	add	r7, sp, #80	@ 0x50
	uint8_t i;
	uint32_t dummy_value;

	if (seg_count < 5) {
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80020b8 <max30102_main_loop+0x174>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	f200 8085 	bhi.w	800205e <max30102_main_loop+0x11a>
		for (i = 0; i < BUFFER_SIZE; i++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	e039      	b.n	8001fce <max30102_main_loop+0x8a>
			while (HAL_GPIO_ReadPin(GPIOB, PB12_IT_Pin) == GPIO_PIN_SET || HAL_GPIO_ReadPin(GPIOB, PB13_IT_Pin) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 8001f5a:	bf00      	nop
 8001f5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f60:	4856      	ldr	r0, [pc, #344]	@ (80020bc <max30102_main_loop+0x178>)
 8001f62:	f000 ffc3 	bl	8002eec <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d0f7      	beq.n	8001f5c <max30102_main_loop+0x18>
 8001f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f70:	4852      	ldr	r0, [pc, #328]	@ (80020bc <max30102_main_loop+0x178>)
 8001f72:	f000 ffbb 	bl	8002eec <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d0ef      	beq.n	8001f5c <max30102_main_loop+0x18>
			maxim_max30102_read_fifo(hi2c1, (ir1 + i), &dummy_value); // ppg1
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4a4f      	ldr	r2, [pc, #316]	@ (80020c0 <max30102_main_loop+0x17c>)
 8001f82:	4413      	add	r3, r2
 8001f84:	4c4f      	ldr	r4, [pc, #316]	@ (80020c4 <max30102_main_loop+0x180>)
 8001f86:	463a      	mov	r2, r7
 8001f88:	9212      	str	r2, [sp, #72]	@ 0x48
 8001f8a:	9311      	str	r3, [sp, #68]	@ 0x44
 8001f8c:	4668      	mov	r0, sp
 8001f8e:	f104 0310 	add.w	r3, r4, #16
 8001f92:	2244      	movs	r2, #68	@ 0x44
 8001f94:	4619      	mov	r1, r3
 8001f96:	f003 f880 	bl	800509a <memcpy>
 8001f9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f9e:	f000 fa56 	bl	800244e <maxim_max30102_read_fifo>
			maxim_max30102_read_fifo(hi2c2, (ir2 + i), &dummy_value); // ppg2
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4a48      	ldr	r2, [pc, #288]	@ (80020c8 <max30102_main_loop+0x184>)
 8001fa8:	4413      	add	r3, r2
 8001faa:	4c48      	ldr	r4, [pc, #288]	@ (80020cc <max30102_main_loop+0x188>)
 8001fac:	463a      	mov	r2, r7
 8001fae:	9212      	str	r2, [sp, #72]	@ 0x48
 8001fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8001fb2:	4668      	mov	r0, sp
 8001fb4:	f104 0310 	add.w	r3, r4, #16
 8001fb8:	2244      	movs	r2, #68	@ 0x44
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f003 f86d 	bl	800509a <memcpy>
 8001fc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fc4:	f000 fa43 	bl	800244e <maxim_max30102_read_fifo>
		for (i = 0; i < BUFFER_SIZE; i++) {
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fd2:	d9c2      	bls.n	8001f5a <max30102_main_loop+0x16>
		}
		filter(ir1, ir1filt, BUFFER_SIZE, prev_ir1, prev_ir1filt);
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <max30102_main_loop+0x18c>)
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <max30102_main_loop+0x190>)
 8001fda:	22c8      	movs	r2, #200	@ 0xc8
 8001fdc:	493e      	ldr	r1, [pc, #248]	@ (80020d8 <max30102_main_loop+0x194>)
 8001fde:	4838      	ldr	r0, [pc, #224]	@ (80020c0 <max30102_main_loop+0x17c>)
 8001fe0:	f7ff f866 	bl	80010b0 <filter>
		filter(ir2, ir2filt, BUFFER_SIZE, prev_ir2, prev_ir2filt);
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <max30102_main_loop+0x198>)
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <max30102_main_loop+0x19c>)
 8001fea:	22c8      	movs	r2, #200	@ 0xc8
 8001fec:	493d      	ldr	r1, [pc, #244]	@ (80020e4 <max30102_main_loop+0x1a0>)
 8001fee:	4836      	ldr	r0, [pc, #216]	@ (80020c8 <max30102_main_loop+0x184>)
 8001ff0:	f7ff f85e 	bl	80010b0 <filter>

		moving_avg_and_dtr(ir1filt, ir1_dtr, BUFFER_SIZE, (WINDOW_SIZE * 2) + 1, 1);
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2333      	movs	r3, #51	@ 0x33
 8001ffa:	22c8      	movs	r2, #200	@ 0xc8
 8001ffc:	493a      	ldr	r1, [pc, #232]	@ (80020e8 <max30102_main_loop+0x1a4>)
 8001ffe:	4836      	ldr	r0, [pc, #216]	@ (80020d8 <max30102_main_loop+0x194>)
 8002000:	f7ff f930 	bl	8001264 <moving_avg_and_dtr>
		moving_avg_and_dtr(ir2filt, ir2_dtr, BUFFER_SIZE, (WINDOW_SIZE * 2) + 1, 1);
 8002004:	2301      	movs	r3, #1
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2333      	movs	r3, #51	@ 0x33
 800200a:	22c8      	movs	r2, #200	@ 0xc8
 800200c:	4937      	ldr	r1, [pc, #220]	@ (80020ec <max30102_main_loop+0x1a8>)
 800200e:	4835      	ldr	r0, [pc, #212]	@ (80020e4 <max30102_main_loop+0x1a0>)
 8002010:	f7ff f928 	bl	8001264 <moving_avg_and_dtr>

		peak_detection(ir1_dtr, BUFFER_SIZE, peak_list1, &num_peaks1, seg_count, W1_PPG1, W2_PPG1, BETA_PPG1);
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <max30102_main_loop+0x174>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4a35      	ldr	r2, [pc, #212]	@ (80020f0 <max30102_main_loop+0x1ac>)
 800201a:	9203      	str	r2, [sp, #12]
 800201c:	2245      	movs	r2, #69	@ 0x45
 800201e:	9202      	str	r2, [sp, #8]
 8002020:	220b      	movs	r2, #11
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <max30102_main_loop+0x1b0>)
 8002028:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <max30102_main_loop+0x1b4>)
 800202a:	21c8      	movs	r1, #200	@ 0xc8
 800202c:	482e      	ldr	r0, [pc, #184]	@ (80020e8 <max30102_main_loop+0x1a4>)
 800202e:	f7ff f990 	bl	8001352 <peak_detection>
		peak_detection(ir2_dtr, BUFFER_SIZE, peak_list2, &num_peaks2, seg_count, W1_PPG2, W2_PPG2, BETA_PPG2);
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <max30102_main_loop+0x174>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4a2e      	ldr	r2, [pc, #184]	@ (80020f0 <max30102_main_loop+0x1ac>)
 8002038:	9203      	str	r2, [sp, #12]
 800203a:	2236      	movs	r2, #54	@ 0x36
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	2208      	movs	r2, #8
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <max30102_main_loop+0x1b8>)
 8002046:	4a2e      	ldr	r2, [pc, #184]	@ (8002100 <max30102_main_loop+0x1bc>)
 8002048:	21c8      	movs	r1, #200	@ 0xc8
 800204a:	4828      	ldr	r0, [pc, #160]	@ (80020ec <max30102_main_loop+0x1a8>)
 800204c:	f7ff f981 	bl	8001352 <peak_detection>
//		for (uint8_t k = 0; k < 20; k++){
//			printf("%d,%d\n", peak_list1[k], peak_list2[k]);
//		}
//		printf("=============================================\n");

		seg_count += 1;
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <max30102_main_loop+0x174>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <max30102_main_loop+0x174>)
 800205a:	701a      	strb	r2, [r3, #0]
		hr_vo2_cal(peak_list2, num_peaks2, &hr, &vo2);
		printf("hr2: %d, vo2_2: %d\n", hr, vo2);
		num_peaks1 = 0;
		num_peaks2 = 0;
	}
}
 800205c:	e028      	b.n	80020b0 <max30102_main_loop+0x16c>
		seg_count = 0;
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <max30102_main_loop+0x174>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
		hr_vo2_cal(peak_list1, num_peaks1, &hr, &vo2);
 8002064:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <max30102_main_loop+0x1b0>)
 8002066:	7819      	ldrb	r1, [r3, #0]
 8002068:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <max30102_main_loop+0x1c0>)
 800206a:	4a27      	ldr	r2, [pc, #156]	@ (8002108 <max30102_main_loop+0x1c4>)
 800206c:	4822      	ldr	r0, [pc, #136]	@ (80020f8 <max30102_main_loop+0x1b4>)
 800206e:	f7ff fce3 	bl	8001a38 <hr_vo2_cal>
		printf("hr1: %d, vo2_1: %d, ", hr, vo2);
 8002072:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <max30102_main_loop+0x1c4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <max30102_main_loop+0x1c0>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4823      	ldr	r0, [pc, #140]	@ (800210c <max30102_main_loop+0x1c8>)
 8002080:	f002 fe48 	bl	8004d14 <iprintf>
		hr_vo2_cal(peak_list2, num_peaks2, &hr, &vo2);
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <max30102_main_loop+0x1b8>)
 8002086:	7819      	ldrb	r1, [r3, #0]
 8002088:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <max30102_main_loop+0x1c0>)
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <max30102_main_loop+0x1c4>)
 800208c:	481c      	ldr	r0, [pc, #112]	@ (8002100 <max30102_main_loop+0x1bc>)
 800208e:	f7ff fcd3 	bl	8001a38 <hr_vo2_cal>
		printf("hr2: %d, vo2_2: %d\n", hr, vo2);
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <max30102_main_loop+0x1c4>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <max30102_main_loop+0x1c0>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	481c      	ldr	r0, [pc, #112]	@ (8002110 <max30102_main_loop+0x1cc>)
 80020a0:	f002 fe38 	bl	8004d14 <iprintf>
		num_peaks1 = 0;
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <max30102_main_loop+0x1b0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
		num_peaks2 = 0;
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <max30102_main_loop+0x1b8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	200014e6 	.word	0x200014e6
 80020bc:	40010c00 	.word	0x40010c00
 80020c0:	20000184 	.word	0x20000184
 80020c4:	20000094 	.word	0x20000094
 80020c8:	200004a4 	.word	0x200004a4
 80020cc:	200000e8 	.word	0x200000e8
 80020d0:	20001458 	.word	0x20001458
 80020d4:	20001444 	.word	0x20001444
 80020d8:	200007c4 	.word	0x200007c4
 80020dc:	20001480 	.word	0x20001480
 80020e0:	2000146c 	.word	0x2000146c
 80020e4:	20000ae4 	.word	0x20000ae4
 80020e8:	20000e04 	.word	0x20000e04
 80020ec:	20001124 	.word	0x20001124
 80020f0:	3dcccccd 	.word	0x3dcccccd
 80020f4:	200014e4 	.word	0x200014e4
 80020f8:	20001494 	.word	0x20001494
 80020fc:	200014e5 	.word	0x200014e5
 8002100:	200014bc 	.word	0x200014bc
 8002104:	200014e8 	.word	0x200014e8
 8002108:	200014e7 	.word	0x200014e7
 800210c:	08005d14 	.word	0x08005d14
 8002110:	08005d2c 	.word	0x08005d2c

08002114 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002118:	f000 fc1e 	bl	8002958 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800211c:	f000 f80f 	bl	800213e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002120:	f000 f8d8 	bl	80022d4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002124:	f000 f850 	bl	80021c8 <MX_I2C1_Init>
	MX_I2C2_Init();
 8002128:	f000 f87c 	bl	8002224 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 800212c:	f000 f8a8 	bl	8002280 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	max30102_setup();
 8002130:	f7ff fe5c 	bl	8001dec <max30102_setup>
	max30102_pre_read();
 8002134:	f7ff fe8a 	bl	8001e4c <max30102_pre_read>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		max30102_main_loop();
 8002138:	f7ff ff04 	bl	8001f44 <max30102_main_loop>
 800213c:	e7fc      	b.n	8002138 <main+0x24>

0800213e <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800213e:	b580      	push	{r7, lr}
 8002140:	b090      	sub	sp, #64	@ 0x40
 8002142:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	2228      	movs	r2, #40	@ 0x28
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f002 ff29 	bl	8004fa4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002168:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216e:	2301      	movs	r3, #1
 8002170:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002172:	2302      	movs	r3, #2
 8002174:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002176:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800217a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800217c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002182:	f107 0318 	add.w	r3, r7, #24
 8002186:	4618      	mov	r0, r3
 8002188:	f001 ff22 	bl	8003fd0 <HAL_RCC_OscConfig>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <SystemClock_Config+0x58>
		Error_Handler();
 8002192:	f000 f8e3 	bl	800235c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002196:	230f      	movs	r3, #15
 8002198:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800219a:	2302      	movs	r3, #2
 800219c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2102      	movs	r1, #2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 f98f 	bl	80044d4 <HAL_RCC_ClockConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x82>
		Error_Handler();
 80021bc:	f000 f8ce 	bl	800235c <Error_Handler>
	}
}
 80021c0:	bf00      	nop
 80021c2:	3740      	adds	r7, #64	@ 0x40
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021ce:	4a13      	ldr	r2, [pc, #76]	@ (800221c <MX_I2C1_Init+0x54>)
 80021d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <MX_I2C1_Init+0x58>)
 80021d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ea:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_I2C1_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <MX_I2C1_Init+0x50>)
 8002206:	f000 fe89 	bl	8002f1c <HAL_I2C_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002210:	f000 f8a4 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000094 	.word	0x20000094
 800221c:	40005400 	.word	0x40005400
 8002220:	00061a80 	.word	0x00061a80

08002224 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <MX_I2C2_Init+0x50>)
 800222a:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <MX_I2C2_Init+0x54>)
 800222c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <MX_I2C2_Init+0x50>)
 8002230:	4a12      	ldr	r2, [pc, #72]	@ (800227c <MX_I2C2_Init+0x58>)
 8002232:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <MX_I2C2_Init+0x50>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <MX_I2C2_Init+0x50>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <MX_I2C2_Init+0x50>)
 8002242:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002246:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <MX_I2C2_Init+0x50>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <MX_I2C2_Init+0x50>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <MX_I2C2_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <MX_I2C2_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002260:	4804      	ldr	r0, [pc, #16]	@ (8002274 <MX_I2C2_Init+0x50>)
 8002262:	f000 fe5b 	bl	8002f1c <HAL_I2C_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C2_Init+0x4c>
		Error_Handler();
 800226c:	f000 f876 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200000e8 	.word	0x200000e8
 8002278:	40005800 	.word	0x40005800
 800227c:	00061a80 	.word	0x00061a80

08002280 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <MX_USART2_UART_Init+0x50>)
 8002288:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80022b6:	4805      	ldr	r0, [pc, #20]	@ (80022cc <MX_USART2_UART_Init+0x4c>)
 80022b8:	f002 fa9a 	bl	80047f0 <HAL_UART_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80022c2:	f000 f84b 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000013c 	.word	0x2000013c
 80022d0:	40004400 	.word	0x40004400

080022d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <MX_GPIO_Init+0x80>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <MX_GPIO_Init+0x80>)
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <MX_GPIO_Init+0x80>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <MX_GPIO_Init+0x80>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a13      	ldr	r2, [pc, #76]	@ (8002354 <MX_GPIO_Init+0x80>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <MX_GPIO_Init+0x80>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <MX_GPIO_Init+0x80>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <MX_GPIO_Init+0x80>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <MX_GPIO_Init+0x80>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PB12_IT_Pin PB13_IT_Pin */
	GPIO_InitStruct.Pin = PB12_IT_Pin | PB13_IT_Pin;
 8002330:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002334:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	4804      	ldr	r0, [pc, #16]	@ (8002358 <MX_GPIO_Init+0x84>)
 8002346:	f000 fc4d 	bl	8002be4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	40010c00 	.word	0x40010c00

0800235c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <Error_Handler+0x8>

08002368 <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af04      	add	r7, sp, #16
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	4613      	mov	r3, r2
 8002376:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	b29a      	uxth	r2, r3
 800237c:	2364      	movs	r3, #100	@ 0x64
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	2301      	movs	r3, #1
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	1dbb      	adds	r3, r7, #6
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	21ae      	movs	r1, #174	@ 0xae
 800238c:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <maxim_max30102_write_reg+0x4c>)
 800238e:	f000 ff09 	bl	80031a4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	b29a      	uxth	r2, r3
 8002396:	2364      	movs	r3, #100	@ 0x64
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	2301      	movs	r3, #1
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2301      	movs	r3, #1
 80023a4:	21ae      	movs	r1, #174	@ 0xae
 80023a6:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <maxim_max30102_write_reg+0x50>)
 80023a8:	f000 fefc 	bl	80031a4 <HAL_I2C_Mem_Write>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000094 	.word	0x20000094
 80023b8:	200000e8 	.word	0x200000e8

080023bc <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(I2C_HandleTypeDef hi2c, uint8_t uch_addr, uint8_t *puch_data)
{
 80023bc:	b084      	sub	sp, #16
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af04      	add	r7, sp, #16
 80023c4:	f107 0c08 	add.w	ip, r7, #8
 80023c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_I2C_Mem_Read(&hi2c, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 80023cc:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	23fa      	movs	r3, #250	@ 0xfa
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	2301      	movs	r3, #1
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2301      	movs	r3, #1
 80023e0:	21af      	movs	r1, #175	@ 0xaf
 80023e2:	f107 0008 	add.w	r0, r7, #8
 80023e6:	f000 ffd7 	bl	8003398 <HAL_I2C_Mem_Read>
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023f2:	b004      	add	sp, #16
 80023f4:	4770      	bx	lr

080023f6 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 80023fa:	21c0      	movs	r1, #192	@ 0xc0
 80023fc:	2002      	movs	r0, #2
 80023fe:	f7ff ffb3 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 8002402:	2100      	movs	r1, #0
 8002404:	2003      	movs	r0, #3
 8002406:	f7ff ffaf 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 800240a:	2100      	movs	r1, #0
 800240c:	2004      	movs	r0, #4
 800240e:	f7ff ffab 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 8002412:	2100      	movs	r1, #0
 8002414:	2005      	movs	r0, #5
 8002416:	f7ff ffa7 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 800241a:	2100      	movs	r1, #0
 800241c:	2006      	movs	r0, #6
 800241e:	f7ff ffa3 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x0fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 8002422:	210f      	movs	r1, #15
 8002424:	2008      	movs	r0, #8
 8002426:	f7ff ff9f 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 800242a:	2103      	movs	r1, #3
 800242c:	2009      	movs	r0, #9
 800242e:	f7ff ff9b 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 8002432:	2127      	movs	r1, #39	@ 0x27
 8002434:	200a      	movs	r0, #10
 8002436:	f7ff ff97 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 800243a:	2124      	movs	r1, #36	@ 0x24
 800243c:	200c      	movs	r0, #12
 800243e:	f7ff ff93 	bl	8002368 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA  for LED2
 8002442:	2124      	movs	r1, #36	@ 0x24
 8002444:	200d      	movs	r0, #13
 8002446:	f7ff ff8f 	bl	8002368 <maxim_max30102_write_reg>
	// maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}

0800244e <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(I2C_HandleTypeDef hi2c, uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 800244e:	b084      	sub	sp, #16
 8002450:	b580      	push	{r7, lr}
 8002452:	b098      	sub	sp, #96	@ 0x60
 8002454:	af14      	add	r7, sp, #80	@ 0x50
 8002456:	f107 0c18 	add.w	ip, r7, #24
 800245a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(hi2c, REG_INTR_STATUS_1, &uch_temp);
 800245e:	f107 030b 	add.w	r3, r7, #11
 8002462:	9312      	str	r3, [sp, #72]	@ 0x48
 8002464:	2300      	movs	r3, #0
 8002466:	9311      	str	r3, [sp, #68]	@ 0x44
 8002468:	4668      	mov	r0, sp
 800246a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800246e:	2244      	movs	r2, #68	@ 0x44
 8002470:	4619      	mov	r1, r3
 8002472:	f002 fe12 	bl	800509a <memcpy>
 8002476:	f107 0318 	add.w	r3, r7, #24
 800247a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800247c:	f7ff ff9e 	bl	80023bc <maxim_max30102_read_reg>
  maxim_max30102_read_reg(hi2c, REG_INTR_STATUS_2, &uch_temp);
 8002480:	f107 030b 	add.w	r3, r7, #11
 8002484:	9312      	str	r3, [sp, #72]	@ 0x48
 8002486:	2301      	movs	r3, #1
 8002488:	9311      	str	r3, [sp, #68]	@ 0x44
 800248a:	4668      	mov	r0, sp
 800248c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002490:	2244      	movs	r2, #68	@ 0x44
 8002492:	4619      	mov	r1, r3
 8002494:	f002 fe01 	bl	800509a <memcpy>
 8002498:	f107 0318 	add.w	r3, r7, #24
 800249c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249e:	f7ff ff8d 	bl	80023bc <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 80024a2:	23fa      	movs	r3, #250	@ 0xfa
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2306      	movs	r3, #6
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	2207      	movs	r2, #7
 80024b2:	21af      	movs	r1, #175	@ 0xaf
 80024b4:	f107 0018 	add.w	r0, r7, #24
 80024b8:	f000 ff6e 	bl	8003398 <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 80024bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 80024c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 80024c8:	793b      	ldrb	r3, [r7, #4]
 80024ca:	60fb      	str	r3, [r7, #12]
  un_temp <<= 16;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	60fb      	str	r3, [r7, #12]
  *pun_red_led += un_temp;
 80024d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	441a      	add	r2, r3
 80024da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024dc:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 80024de:	797b      	ldrb	r3, [r7, #5]
 80024e0:	60fb      	str	r3, [r7, #12]
  un_temp <<= 8;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	60fb      	str	r3, [r7, #12]
  *pun_red_led += un_temp;
 80024e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	441a      	add	r2, r3
 80024f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f2:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 80024f4:	79bb      	ldrb	r3, [r7, #6]
 80024f6:	60fb      	str	r3, [r7, #12]
  *pun_red_led += un_temp;
 80024f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	441a      	add	r2, r3
 8002500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002502:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	60fb      	str	r3, [r7, #12]
  un_temp <<= 16;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	60fb      	str	r3, [r7, #12]
  *pun_ir_led += un_temp;
 800250e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	441a      	add	r2, r3
 8002516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002518:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 800251a:	7a3b      	ldrb	r3, [r7, #8]
 800251c:	60fb      	str	r3, [r7, #12]
  un_temp <<= 8;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	60fb      	str	r3, [r7, #12]
  *pun_ir_led += un_temp;
 8002524:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	441a      	add	r2, r3
 800252c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800252e:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 8002530:	7a7b      	ldrb	r3, [r7, #9]
 8002532:	60fb      	str	r3, [r7, #12]
  *pun_ir_led += un_temp;
 8002534:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	441a      	add	r2, r3
 800253c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800253e:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 8002540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800254a:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 800254c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002562:	b004      	add	sp, #16
 8002564:	4770      	bx	lr

08002566 <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 800256a:	2140      	movs	r1, #64	@ 0x40
 800256c:	2009      	movs	r0, #9
 800256e:	f7ff fefb 	bl	8002368 <maxim_max30102_write_reg>
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_MspInit+0x5c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <HAL_MspInit+0x5c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6193      	str	r3, [r2, #24]
 800258a:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_MspInit+0x5c>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b0f      	ldr	r3, [pc, #60]	@ (80025d4 <HAL_MspInit+0x5c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a0e      	ldr	r2, [pc, #56]	@ (80025d4 <HAL_MspInit+0x5c>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <HAL_MspInit+0x5c>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_MspInit+0x60>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_MspInit+0x60>)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000

080025dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	@ 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a32      	ldr	r2, [pc, #200]	@ (80026c0 <HAL_I2C_MspInit+0xe4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d133      	bne.n	8002664 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b31      	ldr	r3, [pc, #196]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a30      	ldr	r2, [pc, #192]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261a:	2312      	movs	r3, #18
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	4619      	mov	r1, r3
 8002628:	4827      	ldr	r0, [pc, #156]	@ (80026c8 <HAL_I2C_MspInit+0xec>)
 800262a:	f000 fadb 	bl	8002be4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800262e:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_I2C_MspInit+0xf0>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002636:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002644:	4a21      	ldr	r2, [pc, #132]	@ (80026cc <HAL_I2C_MspInit+0xf0>)
 8002646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002648:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a1d      	ldr	r2, [pc, #116]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 8002650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002662:	e029      	b.n	80026b8 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	@ (80026d0 <HAL_I2C_MspInit+0xf4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d124      	bne.n	80026b8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6193      	str	r3, [r2, #24]
 800267a:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002686:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268c:	2312      	movs	r3, #18
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	480b      	ldr	r0, [pc, #44]	@ (80026c8 <HAL_I2C_MspInit+0xec>)
 800269c:	f000 faa2 	bl	8002be4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 80026a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026aa:	61d3      	str	r3, [r2, #28]
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_I2C_MspInit+0xe8>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3730      	adds	r7, #48	@ 0x30
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40005400 	.word	0x40005400
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010c00 	.word	0x40010c00
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40005800 	.word	0x40005800

080026d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <HAL_UART_MspInit+0x88>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12f      	bne.n	8002754 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_UART_MspInit+0x8c>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a19      	ldr	r2, [pc, #100]	@ (8002760 <HAL_UART_MspInit+0x8c>)
 80026fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <HAL_UART_MspInit+0x8c>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_UART_MspInit+0x8c>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <HAL_UART_MspInit+0x8c>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_UART_MspInit+0x8c>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002724:	2304      	movs	r3, #4
 8002726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	480b      	ldr	r0, [pc, #44]	@ (8002764 <HAL_UART_MspInit+0x90>)
 8002738:	f000 fa54 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800273c:	2308      	movs	r3, #8
 800273e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	4619      	mov	r1, r3
 800274e:	4805      	ldr	r0, [pc, #20]	@ (8002764 <HAL_UART_MspInit+0x90>)
 8002750:	f000 fa48 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40004400 	.word	0x40004400
 8002760:	40021000 	.word	0x40021000
 8002764:	40010800 	.word	0x40010800

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <NMI_Handler+0x4>

08002770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <MemManage_Handler+0x4>

08002780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <UsageFault_Handler+0x4>

08002790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b8:	f000 f914 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e00a      	b.n	80027e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d2:	f3af 8000 	nop.w
 80027d6:	4601      	mov	r1, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	b2ca      	uxtb	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbf0      	blt.n	80027d2 <_read+0x12>
  }

  return len;
 80027f0:	687b      	ldr	r3, [r7, #4]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e009      	b.n	8002820 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fad7 	bl	8001dc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	dbf1      	blt.n	800280c <_write+0x12>
  }
  return len;
 8002828:	687b      	ldr	r3, [r7, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_close>:

int _close(int file)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002858:	605a      	str	r2, [r3, #4]
  return 0;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <_isatty>:

int _isatty(int file)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
	...

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	@ (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f002 fbbc 	bl	8005040 <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20005000 	.word	0x20005000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	200014ec 	.word	0x200014ec
 80028fc:	20001640 	.word	0x20001640

08002900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800290c:	f7ff fff8 	bl	8002900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002910:	480b      	ldr	r0, [pc, #44]	@ (8002940 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002912:	490c      	ldr	r1, [pc, #48]	@ (8002944 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002914:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002918:	e002      	b.n	8002920 <LoopCopyDataInit>

0800291a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800291c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291e:	3304      	adds	r3, #4

08002920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002924:	d3f9      	bcc.n	800291a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002928:	4c09      	ldr	r4, [pc, #36]	@ (8002950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800292c:	e001      	b.n	8002932 <LoopFillZerobss>

0800292e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002930:	3204      	adds	r2, #4

08002932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002934:	d3fb      	bcc.n	800292e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002936:	f002 fb89 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800293a:	f7ff fbeb 	bl	8002114 <main>
  bx lr
 800293e:	4770      	bx	lr
  ldr r0, =_sdata
 8002940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002944:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002948:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 800294c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002950:	20001640 	.word	0x20001640

08002954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC1_2_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800295c:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <HAL_Init+0x28>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <HAL_Init+0x28>)
 8002962:	f043 0310 	orr.w	r3, r3, #16
 8002966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002968:	2003      	movs	r0, #3
 800296a:	f000 f907 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296e:	200f      	movs	r0, #15
 8002970:	f000 f808 	bl	8002984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002974:	f7ff fe00 	bl	8002578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_InitTick+0x54>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_InitTick+0x58>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299a:	fbb3 f3f1 	udiv	r3, r3, r1
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f911 	bl	8002bca <HAL_SYSTICK_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00e      	b.n	80029d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d80a      	bhi.n	80029ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b8:	2200      	movs	r2, #0
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f000 f8e7 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c4:	4a06      	ldr	r2, [pc, #24]	@ (80029e0 <HAL_InitTick+0x5c>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000008 	.word	0x20000008
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_IncTick+0x1c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_IncTick+0x20>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a03      	ldr	r2, [pc, #12]	@ (8002a04 <HAL_IncTick+0x20>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000008 	.word	0x20000008
 8002a04:	200014f0 	.word	0x200014f0

08002a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b02      	ldr	r3, [pc, #8]	@ (8002a18 <HAL_GetTick+0x10>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	200014f0 	.word	0x200014f0

08002a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	@ (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff90 	bl	8002a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff49 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff5e 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff90 	bl	8002ad4 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5f 	bl	8002a80 <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffb0 	bl	8002b38 <SysTick_Config>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b08b      	sub	sp, #44	@ 0x2c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf6:	e169      	b.n	8002ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f040 8158 	bne.w	8002ec6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a9a      	ldr	r2, [pc, #616]	@ (8002e84 <HAL_GPIO_Init+0x2a0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d05e      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c20:	4a98      	ldr	r2, [pc, #608]	@ (8002e84 <HAL_GPIO_Init+0x2a0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d875      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c26:	4a98      	ldr	r2, [pc, #608]	@ (8002e88 <HAL_GPIO_Init+0x2a4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d058      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c2c:	4a96      	ldr	r2, [pc, #600]	@ (8002e88 <HAL_GPIO_Init+0x2a4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d86f      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c32:	4a96      	ldr	r2, [pc, #600]	@ (8002e8c <HAL_GPIO_Init+0x2a8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d052      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c38:	4a94      	ldr	r2, [pc, #592]	@ (8002e8c <HAL_GPIO_Init+0x2a8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d869      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c3e:	4a94      	ldr	r2, [pc, #592]	@ (8002e90 <HAL_GPIO_Init+0x2ac>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04c      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c44:	4a92      	ldr	r2, [pc, #584]	@ (8002e90 <HAL_GPIO_Init+0x2ac>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d863      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c4a:	4a92      	ldr	r2, [pc, #584]	@ (8002e94 <HAL_GPIO_Init+0x2b0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d046      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
 8002c50:	4a90      	ldr	r2, [pc, #576]	@ (8002e94 <HAL_GPIO_Init+0x2b0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d85d      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d82a      	bhi.n	8002cb0 <HAL_GPIO_Init+0xcc>
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	d859      	bhi.n	8002d12 <HAL_GPIO_Init+0x12e>
 8002c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c64 <HAL_GPIO_Init+0x80>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002cdf 	.word	0x08002cdf
 8002c68:	08002cb9 	.word	0x08002cb9
 8002c6c:	08002ccb 	.word	0x08002ccb
 8002c70:	08002d0d 	.word	0x08002d0d
 8002c74:	08002d13 	.word	0x08002d13
 8002c78:	08002d13 	.word	0x08002d13
 8002c7c:	08002d13 	.word	0x08002d13
 8002c80:	08002d13 	.word	0x08002d13
 8002c84:	08002d13 	.word	0x08002d13
 8002c88:	08002d13 	.word	0x08002d13
 8002c8c:	08002d13 	.word	0x08002d13
 8002c90:	08002d13 	.word	0x08002d13
 8002c94:	08002d13 	.word	0x08002d13
 8002c98:	08002d13 	.word	0x08002d13
 8002c9c:	08002d13 	.word	0x08002d13
 8002ca0:	08002d13 	.word	0x08002d13
 8002ca4:	08002d13 	.word	0x08002d13
 8002ca8:	08002cc1 	.word	0x08002cc1
 8002cac:	08002cd5 	.word	0x08002cd5
 8002cb0:	4a79      	ldr	r2, [pc, #484]	@ (8002e98 <HAL_GPIO_Init+0x2b4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cb6:	e02c      	b.n	8002d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e029      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e024      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	623b      	str	r3, [r7, #32]
          break;
 8002cd2:	e01f      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	623b      	str	r3, [r7, #32]
          break;
 8002cdc:	e01a      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	623b      	str	r3, [r7, #32]
          break;
 8002cea:	e013      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	611a      	str	r2, [r3, #16]
          break;
 8002cfe:	e009      	b.n	8002d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d00:	2308      	movs	r3, #8
 8002d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	615a      	str	r2, [r3, #20]
          break;
 8002d0a:	e003      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
          break;
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x130>
          break;
 8002d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2bff      	cmp	r3, #255	@ 0xff
 8002d18:	d801      	bhi.n	8002d1e <HAL_GPIO_Init+0x13a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e001      	b.n	8002d22 <HAL_GPIO_Init+0x13e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2bff      	cmp	r3, #255	@ 0xff
 8002d28:	d802      	bhi.n	8002d30 <HAL_GPIO_Init+0x14c>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_Init+0x152>
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	3b08      	subs	r3, #8
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	6a39      	ldr	r1, [r7, #32]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	431a      	orrs	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80b1 	beq.w	8002ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d64:	4b4d      	ldr	r3, [pc, #308]	@ (8002e9c <HAL_GPIO_Init+0x2b8>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a4c      	ldr	r2, [pc, #304]	@ (8002e9c <HAL_GPIO_Init+0x2b8>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_GPIO_Init+0x2b8>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d7c:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_GPIO_Init+0x2bc>)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	3302      	adds	r3, #2
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <HAL_GPIO_Init+0x2c0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_GPIO_Init+0x1ec>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ea8 <HAL_GPIO_Init+0x2c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00d      	beq.n	8002dcc <HAL_GPIO_Init+0x1e8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3e      	ldr	r2, [pc, #248]	@ (8002eac <HAL_GPIO_Init+0x2c8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <HAL_GPIO_Init+0x1e4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3d      	ldr	r2, [pc, #244]	@ (8002eb0 <HAL_GPIO_Init+0x2cc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <HAL_GPIO_Init+0x1e0>
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e006      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e004      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e002      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_GPIO_Init+0x1ee>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd4:	f002 0203 	and.w	r2, r2, #3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4093      	lsls	r3, r2
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002de2:	492f      	ldr	r1, [pc, #188]	@ (8002ea0 <HAL_GPIO_Init+0x2bc>)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	492c      	ldr	r1, [pc, #176]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	4928      	ldr	r1, [pc, #160]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e24:	4b23      	ldr	r3, [pc, #140]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4922      	ldr	r1, [pc, #136]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	491e      	ldr	r1, [pc, #120]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4918      	ldr	r1, [pc, #96]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	4914      	ldr	r1, [pc, #80]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d021      	beq.n	8002eb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	490e      	ldr	r1, [pc, #56]	@ (8002eb4 <HAL_GPIO_Init+0x2d0>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e021      	b.n	8002ec6 <HAL_GPIO_Init+0x2e2>
 8002e82:	bf00      	nop
 8002e84:	10320000 	.word	0x10320000
 8002e88:	10310000 	.word	0x10310000
 8002e8c:	10220000 	.word	0x10220000
 8002e90:	10210000 	.word	0x10210000
 8002e94:	10120000 	.word	0x10120000
 8002e98:	10110000 	.word	0x10110000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	40010c00 	.word	0x40010c00
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_GPIO_Init+0x304>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	4909      	ldr	r1, [pc, #36]	@ (8002ee8 <HAL_GPIO_Init+0x304>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f47f ae8e 	bne.w	8002bf8 <HAL_GPIO_Init+0x14>
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	372c      	adds	r7, #44	@ 0x2c
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e001      	b.n	8002f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e12b      	b.n	8003186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fb4a 	bl	80025dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	@ 0x24
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f80:	f001 fbf0 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8002f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a81      	ldr	r2, [pc, #516]	@ (8003190 <HAL_I2C_Init+0x274>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d807      	bhi.n	8002fa0 <HAL_I2C_Init+0x84>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a80      	ldr	r2, [pc, #512]	@ (8003194 <HAL_I2C_Init+0x278>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e006      	b.n	8002fae <HAL_I2C_Init+0x92>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a7d      	ldr	r2, [pc, #500]	@ (8003198 <HAL_I2C_Init+0x27c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0e7      	b.n	8003186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a78      	ldr	r2, [pc, #480]	@ (800319c <HAL_I2C_Init+0x280>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9b      	lsrs	r3, r3, #18
 8002fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8003190 <HAL_I2C_Init+0x274>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_I2C_Init+0xd4>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3301      	adds	r3, #1
 8002fee:	e009      	b.n	8003004 <HAL_I2C_Init+0xe8>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	4a69      	ldr	r2, [pc, #420]	@ (80031a0 <HAL_I2C_Init+0x284>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	3301      	adds	r3, #1
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	430b      	orrs	r3, r1
 800300a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003016:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	495c      	ldr	r1, [pc, #368]	@ (8003190 <HAL_I2C_Init+0x274>)
 8003020:	428b      	cmp	r3, r1
 8003022:	d819      	bhi.n	8003058 <HAL_I2C_Init+0x13c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e59      	subs	r1, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003032:	1c59      	adds	r1, r3, #1
 8003034:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003038:	400b      	ands	r3, r1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_I2C_Init+0x138>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e59      	subs	r1, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fbb1 f3f3 	udiv	r3, r1, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003052:	e051      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 8003054:	2304      	movs	r3, #4
 8003056:	e04f      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d111      	bne.n	8003084 <HAL_I2C_Init+0x168>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e012      	b.n	80030aa <HAL_I2C_Init+0x18e>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	0099      	lsls	r1, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Init+0x196>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e022      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10e      	bne.n	80030d8 <HAL_I2C_Init+0x1bc>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e58      	subs	r0, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	440b      	add	r3, r1
 80030c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d6:	e00f      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e58      	subs	r0, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	0099      	lsls	r1, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6809      	ldr	r1, [r1, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003126:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6911      	ldr	r1, [r2, #16]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	430b      	orrs	r3, r1
 800313a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	000186a0 	.word	0x000186a0
 8003194:	001e847f 	.word	0x001e847f
 8003198:	003d08ff 	.word	0x003d08ff
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	10624dd3 	.word	0x10624dd3

080031a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	460b      	mov	r3, r1
 80031b8:	813b      	strh	r3, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031be:	f7ff fc23 	bl	8002a08 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	f040 80d9 	bne.w	8003384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2319      	movs	r3, #25
 80031d8:	2201      	movs	r2, #1
 80031da:	496d      	ldr	r1, [pc, #436]	@ (8003390 <HAL_I2C_Mem_Write+0x1ec>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fcc1 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0cc      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Mem_Write+0x56>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0c5      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d007      	beq.n	8003220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2221      	movs	r2, #33	@ 0x21
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	@ 0x40
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a4d      	ldr	r2, [pc, #308]	@ (8003394 <HAL_I2C_Mem_Write+0x1f0>)
 8003260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003262:	88f8      	ldrh	r0, [r7, #6]
 8003264:	893a      	ldrh	r2, [r7, #8]
 8003266:	8979      	ldrh	r1, [r7, #10]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	4603      	mov	r3, r0
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 faf8 	bl	8003868 <I2C_RequestMemoryWrite>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d052      	beq.n	8003324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e081      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fd86 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2b04      	cmp	r3, #4
 8003298:	d107      	bne.n	80032aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11b      	bne.n	8003324 <HAL_I2C_Mem_Write+0x180>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1aa      	bne.n	8003282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fd79 	bl	8003e28 <I2C_WaitOnBTFFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2b04      	cmp	r3, #4
 8003342:	d107      	bne.n	8003354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e016      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	00100002 	.word	0x00100002
 8003394:	ffff0000 	.word	0xffff0000

08003398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	@ 0x30
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b6:	f7ff fb27 	bl	8002a08 <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	f040 8244 	bne.w	8003852 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2319      	movs	r3, #25
 80033d0:	2201      	movs	r2, #1
 80033d2:	4982      	ldr	r1, [pc, #520]	@ (80035dc <HAL_I2C_Mem_Read+0x244>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fbc5 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	e237      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Mem_Read+0x5a>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e230      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d007      	beq.n	8003418 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2222      	movs	r2, #34	@ 0x22
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003442:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a62      	ldr	r2, [pc, #392]	@ (80035e0 <HAL_I2C_Mem_Read+0x248>)
 8003458:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800345a:	88f8      	ldrh	r0, [r7, #6]
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4603      	mov	r3, r0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa92 	bl	8003994 <I2C_RequestMemoryRead>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1ec      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d113      	bne.n	80034aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e1c0      	b.n	800382c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d11e      	bne.n	80034f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034c2:	b672      	cpsid	i
}
 80034c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034ec:	b662      	cpsie	i
}
 80034ee:	e035      	b.n	800355c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d11e      	bne.n	8003536 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003530:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003532:	b662      	cpsie	i
}
 8003534:	e012      	b.n	800355c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003544:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800355c:	e166      	b.n	800382c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	2b03      	cmp	r3, #3
 8003564:	f200 811f 	bhi.w	80037a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	2b01      	cmp	r3, #1
 800356e:	d123      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fc9f 	bl	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e167      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b6:	e139      	b.n	800382c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d152      	bne.n	8003666 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	2200      	movs	r2, #0
 80035c8:	4906      	ldr	r1, [pc, #24]	@ (80035e4 <HAL_I2C_Mem_Read+0x24c>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 faca 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e13c      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
 80035da:	bf00      	nop
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000
 80035e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035e8:	b672      	cpsid	i
}
 80035ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800362e:	b662      	cpsie	i
}
 8003630:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003664:	e0e2      	b.n	800382c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366c:	2200      	movs	r2, #0
 800366e:	497b      	ldr	r1, [pc, #492]	@ (800385c <HAL_I2C_Mem_Read+0x4c4>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fa77 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0e9      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800368e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003690:	b672      	cpsid	i
}
 8003692:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036c6:	4b66      	ldr	r3, [pc, #408]	@ (8003860 <HAL_I2C_Mem_Read+0x4c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	08db      	lsrs	r3, r3, #3
 80036cc:	4a65      	ldr	r2, [pc, #404]	@ (8003864 <HAL_I2C_Mem_Read+0x4cc>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0a1a      	lsrs	r2, r3, #8
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00da      	lsls	r2, r3, #3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d118      	bne.n	800371e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800370e:	b662      	cpsie	i
}
 8003710:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e09a      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d1d9      	bne.n	80036e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800376e:	b662      	cpsie	i
}
 8003770:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a4:	e042      	b.n	800382c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb84 	bl	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e04c      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d118      	bne.n	800382c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	f47f ae94 	bne.w	800355e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	@ 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010004 	.word	0x00010004
 8003860:	20000000 	.word	0x20000000
 8003864:	14f8b589 	.word	0x14f8b589

08003868 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	460b      	mov	r3, r1
 800387c:	813b      	strh	r3, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003890:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2200      	movs	r2, #0
 800389a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f960 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b8:	d103      	bne.n	80038c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e05f      	b.n	8003986 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	492d      	ldr	r1, [pc, #180]	@ (8003990 <I2C_RequestMemoryWrite+0x128>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f9bb 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e04c      	b.n	8003986 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003904:	6a39      	ldr	r1, [r7, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa46 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	2b04      	cmp	r3, #4
 8003918:	d107      	bne.n	800392a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003928:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e02b      	b.n	8003986 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003934:	893b      	ldrh	r3, [r7, #8]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	611a      	str	r2, [r3, #16]
 800393e:	e021      	b.n	8003984 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	b29b      	uxth	r3, r3
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa20 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	2b04      	cmp	r3, #4
 8003964:	d107      	bne.n	8003976 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003974:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e005      	b.n	8003986 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800397a:	893b      	ldrh	r3, [r7, #8]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	00010002 	.word	0x00010002

08003994 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8c2 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f4:	d103      	bne.n	80039fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0aa      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a02:	897b      	ldrh	r3, [r7, #10]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	4952      	ldr	r1, [pc, #328]	@ (8003b60 <I2C_RequestMemoryRead+0x1cc>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f91d 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e097      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a40:	6a39      	ldr	r1, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f9a8 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d107      	bne.n	8003a66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e076      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a70:	893b      	ldrh	r3, [r7, #8]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	e021      	b.n	8003ac0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8c:	6a39      	ldr	r1, [r7, #32]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f982 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d107      	bne.n	8003ab2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e050      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab6:	893b      	ldrh	r3, [r7, #8]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac2:	6a39      	ldr	r1, [r7, #32]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f967 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d107      	bne.n	8003ae8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e035      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003afa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f82b 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b22:	d103      	bne.n	8003b2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e013      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	4906      	ldr	r1, [pc, #24]	@ (8003b60 <I2C_RequestMemoryRead+0x1cc>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f886 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010002 	.word	0x00010002

08003b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b74:	e048      	b.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d044      	beq.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fe ff43 	bl	8002a08 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d139      	bne.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d116      	bne.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e023      	b.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	e00c      	b.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d093      	beq.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c66:	e071      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d123      	bne.n	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e067      	b.n	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d041      	beq.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7fe fe9e 	bl	8002a08 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d136      	bne.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d10c      	bne.n	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e00b      	b.n	8003d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e021      	b.n	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d10c      	bne.n	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e00b      	b.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f47f af6d 	bne.w	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da4:	e034      	b.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f8e3 	bl	8003f72 <I2C_IsAcknowledgeFailed>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d028      	beq.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fe fe23 	bl	8002a08 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11d      	bne.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dde:	2b80      	cmp	r3, #128	@ 0x80
 8003de0:	d016      	beq.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e007      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d1c3      	bne.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f89b 	bl	8003f72 <I2C_IsAcknowledgeFailed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d028      	beq.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fe fddb 	bl	8002a08 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11d      	bne.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d016      	beq.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d1c3      	bne.n	8003e36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ec4:	e049      	b.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d119      	bne.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0210 	mvn.w	r2, #16
 8003edc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e030      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f08:	f7fe fd7e 	bl	8002a08 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11d      	bne.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d016      	beq.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e007      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d1ae      	bne.n	8003ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f88:	d11b      	bne.n	8003fc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
	...

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e272      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8087 	beq.w	80040fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff0:	4b92      	ldr	r3, [pc, #584]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d00c      	beq.n	8004016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d112      	bne.n	800402e <HAL_RCC_OscConfig+0x5e>
 8004008:	4b8c      	ldr	r3, [pc, #560]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d10b      	bne.n	800402e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004016:	4b89      	ldr	r3, [pc, #548]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d06c      	beq.n	80040fc <HAL_RCC_OscConfig+0x12c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d168      	bne.n	80040fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e24c      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004036:	d106      	bne.n	8004046 <HAL_RCC_OscConfig+0x76>
 8004038:	4b80      	ldr	r3, [pc, #512]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a7f      	ldr	r2, [pc, #508]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800403e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	e02e      	b.n	80040a4 <HAL_RCC_OscConfig+0xd4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x98>
 800404e:	4b7b      	ldr	r3, [pc, #492]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7a      	ldr	r2, [pc, #488]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b78      	ldr	r3, [pc, #480]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a77      	ldr	r2, [pc, #476]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e01d      	b.n	80040a4 <HAL_RCC_OscConfig+0xd4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0xbc>
 8004072:	4b72      	ldr	r3, [pc, #456]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a71      	ldr	r2, [pc, #452]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b6f      	ldr	r3, [pc, #444]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6e      	ldr	r2, [pc, #440]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0xd4>
 800408c:	4b6b      	ldr	r3, [pc, #428]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6a      	ldr	r2, [pc, #424]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b68      	ldr	r3, [pc, #416]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a67      	ldr	r2, [pc, #412]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fcac 	bl	8002a08 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe fca8 	bl	8002a08 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e200      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b5d      	ldr	r3, [pc, #372]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0xe4>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe fc98 	bl	8002a08 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fc94 	bl	8002a08 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	@ 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e1ec      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	4b53      	ldr	r3, [pc, #332]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x10c>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d063      	beq.n	80041d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410a:	4b4c      	ldr	r3, [pc, #304]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004116:	4b49      	ldr	r3, [pc, #292]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b08      	cmp	r3, #8
 8004120:	d11c      	bne.n	800415c <HAL_RCC_OscConfig+0x18c>
 8004122:	4b46      	ldr	r3, [pc, #280]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	4b43      	ldr	r3, [pc, #268]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_RCC_OscConfig+0x176>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e1c0      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004146:	4b3d      	ldr	r3, [pc, #244]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4939      	ldr	r1, [pc, #228]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	e03a      	b.n	80041d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004164:	4b36      	ldr	r3, [pc, #216]	@ (8004240 <HAL_RCC_OscConfig+0x270>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416a:	f7fe fc4d 	bl	8002a08 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7fe fc49 	bl	8002a08 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1a1      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	4b2d      	ldr	r3, [pc, #180]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b2a      	ldr	r3, [pc, #168]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4927      	ldr	r1, [pc, #156]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
 80041a4:	e015      	b.n	80041d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a6:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <HAL_RCC_OscConfig+0x270>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe fc2c 	bl	8002a08 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b4:	f7fe fc28 	bl	8002a08 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e180      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03a      	beq.n	8004254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d019      	beq.n	800421a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	4b17      	ldr	r3, [pc, #92]	@ (8004244 <HAL_RCC_OscConfig+0x274>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ec:	f7fe fc0c 	bl	8002a08 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fe fc08 	bl	8002a08 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e160      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <HAL_RCC_OscConfig+0x26c>)
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004212:	2001      	movs	r0, #1
 8004214:	f000 face 	bl	80047b4 <RCC_Delay>
 8004218:	e01c      	b.n	8004254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421a:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <HAL_RCC_OscConfig+0x274>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7fe fbf2 	bl	8002a08 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004226:	e00f      	b.n	8004248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004228:	f7fe fbee 	bl	8002a08 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d908      	bls.n	8004248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e146      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	42420000 	.word	0x42420000
 8004244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	4b92      	ldr	r3, [pc, #584]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e9      	bne.n	8004228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a6 	beq.w	80043ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004266:	4b8b      	ldr	r3, [pc, #556]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	4b88      	ldr	r3, [pc, #544]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4a87      	ldr	r2, [pc, #540]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427c:	61d3      	str	r3, [r2, #28]
 800427e:	4b85      	ldr	r3, [pc, #532]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	4b82      	ldr	r3, [pc, #520]	@ (8004498 <HAL_RCC_OscConfig+0x4c8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d118      	bne.n	80042cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429a:	4b7f      	ldr	r3, [pc, #508]	@ (8004498 <HAL_RCC_OscConfig+0x4c8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7e      	ldr	r2, [pc, #504]	@ (8004498 <HAL_RCC_OscConfig+0x4c8>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a6:	f7fe fbaf 	bl	8002a08 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7fe fbab 	bl	8002a08 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b64      	cmp	r3, #100	@ 0x64
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e103      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	4b75      	ldr	r3, [pc, #468]	@ (8004498 <HAL_RCC_OscConfig+0x4c8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x312>
 80042d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6213      	str	r3, [r2, #32]
 80042e0:	e02d      	b.n	800433e <HAL_RCC_OscConfig+0x36e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x334>
 80042ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4a69      	ldr	r2, [pc, #420]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6213      	str	r3, [r2, #32]
 80042f6:	4b67      	ldr	r3, [pc, #412]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a66      	ldr	r2, [pc, #408]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	6213      	str	r3, [r2, #32]
 8004302:	e01c      	b.n	800433e <HAL_RCC_OscConfig+0x36e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b05      	cmp	r3, #5
 800430a:	d10c      	bne.n	8004326 <HAL_RCC_OscConfig+0x356>
 800430c:	4b61      	ldr	r3, [pc, #388]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4a60      	ldr	r2, [pc, #384]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004312:	f043 0304 	orr.w	r3, r3, #4
 8004316:	6213      	str	r3, [r2, #32]
 8004318:	4b5e      	ldr	r3, [pc, #376]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a5d      	ldr	r2, [pc, #372]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6213      	str	r3, [r2, #32]
 8004324:	e00b      	b.n	800433e <HAL_RCC_OscConfig+0x36e>
 8004326:	4b5b      	ldr	r3, [pc, #364]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	4a5a      	ldr	r2, [pc, #360]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	6213      	str	r3, [r2, #32]
 8004332:	4b58      	ldr	r3, [pc, #352]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a57      	ldr	r2, [pc, #348]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d015      	beq.n	8004372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fe fb5f 	bl	8002a08 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fe fb5b 	bl	8002a08 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e0b1      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	4b4b      	ldr	r3, [pc, #300]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ee      	beq.n	800434e <HAL_RCC_OscConfig+0x37e>
 8004370:	e014      	b.n	800439c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004372:	f7fe fb49 	bl	8002a08 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fe fb45 	bl	8002a08 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e09b      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004390:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1ee      	bne.n	800437a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d105      	bne.n	80043ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8087 	beq.w	80044c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b8:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d061      	beq.n	8004488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d146      	bne.n	800445a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043cc:	4b33      	ldr	r3, [pc, #204]	@ (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe fb19 	bl	8002a08 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fe fb15 	bl	8002a08 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e06d      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ec:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d108      	bne.n	8004414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004402:	4b24      	ldr	r3, [pc, #144]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4921      	ldr	r1, [pc, #132]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004414:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a19      	ldr	r1, [r3, #32]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	430b      	orrs	r3, r1
 8004426:	491b      	ldr	r1, [pc, #108]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442c:	4b1b      	ldr	r3, [pc, #108]	@ (800449c <HAL_RCC_OscConfig+0x4cc>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fe fae9 	bl	8002a08 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443a:	f7fe fae5 	bl	8002a08 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e03d      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800444c:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x46a>
 8004458:	e035      	b.n	80044c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	4b10      	ldr	r3, [pc, #64]	@ (800449c <HAL_RCC_OscConfig+0x4cc>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe fad2 	bl	8002a08 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fe face 	bl	8002a08 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e026      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447a:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x498>
 8004486:	e01e      	b.n	80044c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e019      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
 800449c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCC_OscConfig+0x500>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000

080044d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0d0      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b67      	ldr	r3, [pc, #412]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 0207 	bic.w	r2, r3, #7
 80044fe:	4965      	ldr	r1, [pc, #404]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a58      	ldr	r2, [pc, #352]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800453a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a52      	ldr	r2, [pc, #328]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d040      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d115      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	4b41      	ldr	r3, [pc, #260]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e073      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e06b      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b2:	4b39      	ldr	r3, [pc, #228]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f023 0203 	bic.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4936      	ldr	r1, [pc, #216]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c4:	f7fe fa20 	bl	8002a08 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fe fa1c 	bl	8002a08 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e053      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 020c 	and.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1eb      	bne.n	80045cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f4:	4b27      	ldr	r3, [pc, #156]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d210      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b24      	ldr	r3, [pc, #144]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 0207 	bic.w	r2, r3, #7
 800460a:	4922      	ldr	r1, [pc, #136]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	@ (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800464e:	4b12      	ldr	r3, [pc, #72]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <HAL_RCC_ClockConfig+0x1cc>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe f97e 	bl	8002984 <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40022000 	.word	0x40022000
 8004698:	40021000 	.word	0x40021000
 800469c:	08005d40 	.word	0x08005d40
 80046a0:	20000000 	.word	0x20000000
 80046a4:	20000004 	.word	0x20000004

080046a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCC_GetSysClockFreq+0x94>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d002      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x30>
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d003      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0x36>
 80046d6:	e027      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046d8:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x98>)
 80046da:	613b      	str	r3, [r7, #16]
      break;
 80046dc:	e027      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0c9b      	lsrs	r3, r3, #18
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	4a17      	ldr	r2, [pc, #92]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d010      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046f6:	4b11      	ldr	r3, [pc, #68]	@ (800473c <HAL_RCC_GetSysClockFreq+0x94>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	0c5b      	lsrs	r3, r3, #17
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a0d      	ldr	r2, [pc, #52]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x98>)
 800470a:	fb03 f202 	mul.w	r2, r3, r2
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e004      	b.n	8004722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0c      	ldr	r2, [pc, #48]	@ (800474c <HAL_RCC_GetSysClockFreq+0xa4>)
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	613b      	str	r3, [r7, #16]
      break;
 8004726:	e002      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x98>)
 800472a:	613b      	str	r3, [r7, #16]
      break;
 800472c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472e:	693b      	ldr	r3, [r7, #16]
}
 8004730:	4618      	mov	r0, r3
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	007a1200 	.word	0x007a1200
 8004744:	08005d58 	.word	0x08005d58
 8004748:	08005d68 	.word	0x08005d68
 800474c:	003d0900 	.word	0x003d0900

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b02      	ldr	r3, [pc, #8]	@ (8004760 <HAL_RCC_GetHCLKFreq+0x10>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr
 8004760:	20000000 	.word	0x20000000

08004764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004768:	f7ff fff2 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4903      	ldr	r1, [pc, #12]	@ (8004788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	08005d50 	.word	0x08005d50

0800478c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004790:	f7ff ffde 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	0adb      	lsrs	r3, r3, #11
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4903      	ldr	r1, [pc, #12]	@ (80047b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08005d50 	.word	0x08005d50

080047b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <RCC_Delay+0x34>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <RCC_Delay+0x38>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0a5b      	lsrs	r3, r3, #9
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047d0:	bf00      	nop
  }
  while (Delay --);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f9      	bne.n	80047d0 <RCC_Delay+0x1c>
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000000 	.word	0x20000000
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e042      	b.n	8004888 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd ff5c 	bl	80026d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	@ 0x24
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f91d 	bl	8004a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d16d      	bne.n	800498c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Transmit+0x2c>
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e066      	b.n	800498e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2221      	movs	r2, #33	@ 0x21
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ce:	f7fe f89b 	bl	8002a08 <HAL_GetTick>
 80048d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e8:	d108      	bne.n	80048fc <HAL_UART_Transmit+0x6c>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e003      	b.n	8004904 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004904:	e02a      	b.n	800495c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	@ 0x80
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f840 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e036      	b.n	800498e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3302      	adds	r3, #2
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e007      	b.n	800494e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1cf      	bne.n	8004906 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2140      	movs	r1, #64	@ 0x40
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f810 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b090      	sub	sp, #64	@ 0x40
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	e050      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d04c      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049b6:	f7fe f827 	bl	8002a08 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d241      	bcs.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80049dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a1a:	623a      	str	r2, [r7, #32]
 8004a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	69f9      	ldr	r1, [r7, #28]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e5      	bne.n	80049fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d09f      	beq.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3740      	adds	r7, #64	@ 0x40
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004aae:	f023 030c 	bic.w	r3, r3, #12
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b88 <UART_SetConfig+0x114>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7ff fe56 	bl	800478c <HAL_RCC_GetPCLK2Freq>
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	e002      	b.n	8004aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7ff fe3e 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009a      	lsls	r2, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	4a22      	ldr	r2, [pc, #136]	@ (8004b8c <UART_SetConfig+0x118>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	0119      	lsls	r1, r3, #4
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009a      	lsls	r2, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b20:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <UART_SetConfig+0x118>)
 8004b22:	fba3 0302 	umull	r0, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2064      	movs	r0, #100	@ 0x64
 8004b2a:	fb00 f303 	mul.w	r3, r0, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	3332      	adds	r3, #50	@ 0x32
 8004b34:	4a15      	ldr	r2, [pc, #84]	@ (8004b8c <UART_SetConfig+0x118>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b40:	4419      	add	r1, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b58:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <UART_SetConfig+0x118>)
 8004b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	2064      	movs	r0, #100	@ 0x64
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	3332      	adds	r3, #50	@ 0x32
 8004b6c:	4a07      	ldr	r2, [pc, #28]	@ (8004b8c <UART_SetConfig+0x118>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	f003 020f 	and.w	r2, r3, #15
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	51eb851f 	.word	0x51eb851f

08004b90 <std>:
 8004b90:	2300      	movs	r3, #0
 8004b92:	b510      	push	{r4, lr}
 8004b94:	4604      	mov	r4, r0
 8004b96:	e9c0 3300 	strd	r3, r3, [r0]
 8004b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b9e:	6083      	str	r3, [r0, #8]
 8004ba0:	8181      	strh	r1, [r0, #12]
 8004ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ba4:	81c2      	strh	r2, [r0, #14]
 8004ba6:	6183      	str	r3, [r0, #24]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	2208      	movs	r2, #8
 8004bac:	305c      	adds	r0, #92	@ 0x5c
 8004bae:	f000 f9f9 	bl	8004fa4 <memset>
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <std+0x58>)
 8004bb4:	6224      	str	r4, [r4, #32]
 8004bb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <std+0x5c>)
 8004bba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <std+0x60>)
 8004bbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <std+0x64>)
 8004bc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <std+0x68>)
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d006      	beq.n	8004bd8 <std+0x48>
 8004bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bce:	4294      	cmp	r4, r2
 8004bd0:	d002      	beq.n	8004bd8 <std+0x48>
 8004bd2:	33d0      	adds	r3, #208	@ 0xd0
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	d105      	bne.n	8004be4 <std+0x54>
 8004bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f000 ba58 	b.w	8005094 <__retarget_lock_init_recursive>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	bf00      	nop
 8004be8:	08004df5 	.word	0x08004df5
 8004bec:	08004e17 	.word	0x08004e17
 8004bf0:	08004e4f 	.word	0x08004e4f
 8004bf4:	08004e73 	.word	0x08004e73
 8004bf8:	200014f4 	.word	0x200014f4

08004bfc <stdio_exit_handler>:
 8004bfc:	4a02      	ldr	r2, [pc, #8]	@ (8004c08 <stdio_exit_handler+0xc>)
 8004bfe:	4903      	ldr	r1, [pc, #12]	@ (8004c0c <stdio_exit_handler+0x10>)
 8004c00:	4803      	ldr	r0, [pc, #12]	@ (8004c10 <stdio_exit_handler+0x14>)
 8004c02:	f000 b869 	b.w	8004cd8 <_fwalk_sglue>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	08005949 	.word	0x08005949
 8004c10:	2000001c 	.word	0x2000001c

08004c14 <cleanup_stdio>:
 8004c14:	6841      	ldr	r1, [r0, #4]
 8004c16:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <cleanup_stdio+0x34>)
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	d001      	beq.n	8004c24 <cleanup_stdio+0x10>
 8004c20:	f000 fe92 	bl	8005948 <_fflush_r>
 8004c24:	68a1      	ldr	r1, [r4, #8]
 8004c26:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <cleanup_stdio+0x38>)
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d002      	beq.n	8004c32 <cleanup_stdio+0x1e>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f000 fe8b 	bl	8005948 <_fflush_r>
 8004c32:	68e1      	ldr	r1, [r4, #12]
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <cleanup_stdio+0x3c>)
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d004      	beq.n	8004c44 <cleanup_stdio+0x30>
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c40:	f000 be82 	b.w	8005948 <_fflush_r>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	200014f4 	.word	0x200014f4
 8004c4c:	2000155c 	.word	0x2000155c
 8004c50:	200015c4 	.word	0x200015c4

08004c54 <global_stdio_init.part.0>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <global_stdio_init.part.0+0x30>)
 8004c58:	4c0b      	ldr	r4, [pc, #44]	@ (8004c88 <global_stdio_init.part.0+0x34>)
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <global_stdio_init.part.0+0x38>)
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	2104      	movs	r1, #4
 8004c62:	2200      	movs	r2, #0
 8004c64:	f7ff ff94 	bl	8004b90 <std>
 8004c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2109      	movs	r1, #9
 8004c70:	f7ff ff8e 	bl	8004b90 <std>
 8004c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c78:	2202      	movs	r2, #2
 8004c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c7e:	2112      	movs	r1, #18
 8004c80:	f7ff bf86 	b.w	8004b90 <std>
 8004c84:	2000162c 	.word	0x2000162c
 8004c88:	200014f4 	.word	0x200014f4
 8004c8c:	08004bfd 	.word	0x08004bfd

08004c90 <__sfp_lock_acquire>:
 8004c90:	4801      	ldr	r0, [pc, #4]	@ (8004c98 <__sfp_lock_acquire+0x8>)
 8004c92:	f000 ba00 	b.w	8005096 <__retarget_lock_acquire_recursive>
 8004c96:	bf00      	nop
 8004c98:	20001635 	.word	0x20001635

08004c9c <__sfp_lock_release>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__sfp_lock_release+0x8>)
 8004c9e:	f000 b9fb 	b.w	8005098 <__retarget_lock_release_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	20001635 	.word	0x20001635

08004ca8 <__sinit>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	f7ff fff0 	bl	8004c90 <__sfp_lock_acquire>
 8004cb0:	6a23      	ldr	r3, [r4, #32]
 8004cb2:	b11b      	cbz	r3, 8004cbc <__sinit+0x14>
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	f7ff bff0 	b.w	8004c9c <__sfp_lock_release>
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <__sinit+0x28>)
 8004cbe:	6223      	str	r3, [r4, #32]
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <__sinit+0x2c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f5      	bne.n	8004cb4 <__sinit+0xc>
 8004cc8:	f7ff ffc4 	bl	8004c54 <global_stdio_init.part.0>
 8004ccc:	e7f2      	b.n	8004cb4 <__sinit+0xc>
 8004cce:	bf00      	nop
 8004cd0:	08004c15 	.word	0x08004c15
 8004cd4:	2000162c 	.word	0x2000162c

08004cd8 <_fwalk_sglue>:
 8004cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cdc:	4607      	mov	r7, r0
 8004cde:	4688      	mov	r8, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8004cec:	d505      	bpl.n	8004cfa <_fwalk_sglue+0x22>
 8004cee:	6824      	ldr	r4, [r4, #0]
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d1f7      	bne.n	8004ce4 <_fwalk_sglue+0xc>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d907      	bls.n	8004d10 <_fwalk_sglue+0x38>
 8004d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d04:	3301      	adds	r3, #1
 8004d06:	d003      	beq.n	8004d10 <_fwalk_sglue+0x38>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c0      	blx	r8
 8004d0e:	4306      	orrs	r6, r0
 8004d10:	3568      	adds	r5, #104	@ 0x68
 8004d12:	e7e9      	b.n	8004ce8 <_fwalk_sglue+0x10>

08004d14 <iprintf>:
 8004d14:	b40f      	push	{r0, r1, r2, r3}
 8004d16:	b507      	push	{r0, r1, r2, lr}
 8004d18:	4906      	ldr	r1, [pc, #24]	@ (8004d34 <iprintf+0x20>)
 8004d1a:	ab04      	add	r3, sp, #16
 8004d1c:	6808      	ldr	r0, [r1, #0]
 8004d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d22:	6881      	ldr	r1, [r0, #8]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	f000 fae5 	bl	80052f4 <_vfiprintf_r>
 8004d2a:	b003      	add	sp, #12
 8004d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d30:	b004      	add	sp, #16
 8004d32:	4770      	bx	lr
 8004d34:	20000018 	.word	0x20000018

08004d38 <_puts_r>:
 8004d38:	6a03      	ldr	r3, [r0, #32]
 8004d3a:	b570      	push	{r4, r5, r6, lr}
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	460e      	mov	r6, r1
 8004d40:	6884      	ldr	r4, [r0, #8]
 8004d42:	b90b      	cbnz	r3, 8004d48 <_puts_r+0x10>
 8004d44:	f7ff ffb0 	bl	8004ca8 <__sinit>
 8004d48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d405      	bmi.n	8004d5a <_puts_r+0x22>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	0598      	lsls	r0, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_puts_r+0x22>
 8004d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d56:	f000 f99e 	bl	8005096 <__retarget_lock_acquire_recursive>
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	0719      	lsls	r1, r3, #28
 8004d5e:	d502      	bpl.n	8004d66 <_puts_r+0x2e>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d135      	bne.n	8004dd2 <_puts_r+0x9a>
 8004d66:	4621      	mov	r1, r4
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f000 f8c5 	bl	8004ef8 <__swsetup_r>
 8004d6e:	b380      	cbz	r0, 8004dd2 <_puts_r+0x9a>
 8004d70:	f04f 35ff 	mov.w	r5, #4294967295
 8004d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d76:	07da      	lsls	r2, r3, #31
 8004d78:	d405      	bmi.n	8004d86 <_puts_r+0x4e>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	d402      	bmi.n	8004d86 <_puts_r+0x4e>
 8004d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d82:	f000 f989 	bl	8005098 <__retarget_lock_release_recursive>
 8004d86:	4628      	mov	r0, r5
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da04      	bge.n	8004d98 <_puts_r+0x60>
 8004d8e:	69a2      	ldr	r2, [r4, #24]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	dc17      	bgt.n	8004dc4 <_puts_r+0x8c>
 8004d94:	290a      	cmp	r1, #10
 8004d96:	d015      	beq.n	8004dc4 <_puts_r+0x8c>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	7019      	strb	r1, [r3, #0]
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004da6:	3b01      	subs	r3, #1
 8004da8:	60a3      	str	r3, [r4, #8]
 8004daa:	2900      	cmp	r1, #0
 8004dac:	d1ed      	bne.n	8004d8a <_puts_r+0x52>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da11      	bge.n	8004dd6 <_puts_r+0x9e>
 8004db2:	4622      	mov	r2, r4
 8004db4:	210a      	movs	r1, #10
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 f85f 	bl	8004e7a <__swbuf_r>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d0d7      	beq.n	8004d70 <_puts_r+0x38>
 8004dc0:	250a      	movs	r5, #10
 8004dc2:	e7d7      	b.n	8004d74 <_puts_r+0x3c>
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 f857 	bl	8004e7a <__swbuf_r>
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d1e7      	bne.n	8004da0 <_puts_r+0x68>
 8004dd0:	e7ce      	b.n	8004d70 <_puts_r+0x38>
 8004dd2:	3e01      	subs	r6, #1
 8004dd4:	e7e4      	b.n	8004da0 <_puts_r+0x68>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	220a      	movs	r2, #10
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e7ee      	b.n	8004dc0 <_puts_r+0x88>
	...

08004de4 <puts>:
 8004de4:	4b02      	ldr	r3, [pc, #8]	@ (8004df0 <puts+0xc>)
 8004de6:	4601      	mov	r1, r0
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f7ff bfa5 	b.w	8004d38 <_puts_r>
 8004dee:	bf00      	nop
 8004df0:	20000018 	.word	0x20000018

08004df4 <__sread>:
 8004df4:	b510      	push	{r4, lr}
 8004df6:	460c      	mov	r4, r1
 8004df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfc:	f000 f8fc 	bl	8004ff8 <_read_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	bfab      	itete	ge
 8004e04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e06:	89a3      	ldrhlt	r3, [r4, #12]
 8004e08:	181b      	addge	r3, r3, r0
 8004e0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e0e:	bfac      	ite	ge
 8004e10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e12:	81a3      	strhlt	r3, [r4, #12]
 8004e14:	bd10      	pop	{r4, pc}

08004e16 <__swrite>:
 8004e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1a:	461f      	mov	r7, r3
 8004e1c:	898b      	ldrh	r3, [r1, #12]
 8004e1e:	4605      	mov	r5, r0
 8004e20:	05db      	lsls	r3, r3, #23
 8004e22:	460c      	mov	r4, r1
 8004e24:	4616      	mov	r6, r2
 8004e26:	d505      	bpl.n	8004e34 <__swrite+0x1e>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e30:	f000 f8d0 	bl	8004fd4 <_lseek_r>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	4632      	mov	r2, r6
 8004e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	4628      	mov	r0, r5
 8004e40:	463b      	mov	r3, r7
 8004e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	f000 b8e7 	b.w	800501c <_write_r>

08004e4e <__sseek>:
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	460c      	mov	r4, r1
 8004e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e56:	f000 f8bd 	bl	8004fd4 <_lseek_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	bf15      	itete	ne
 8004e60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e6a:	81a3      	strheq	r3, [r4, #12]
 8004e6c:	bf18      	it	ne
 8004e6e:	81a3      	strhne	r3, [r4, #12]
 8004e70:	bd10      	pop	{r4, pc}

08004e72 <__sclose>:
 8004e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e76:	f000 b89d 	b.w	8004fb4 <_close_r>

08004e7a <__swbuf_r>:
 8004e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7c:	460e      	mov	r6, r1
 8004e7e:	4614      	mov	r4, r2
 8004e80:	4605      	mov	r5, r0
 8004e82:	b118      	cbz	r0, 8004e8c <__swbuf_r+0x12>
 8004e84:	6a03      	ldr	r3, [r0, #32]
 8004e86:	b90b      	cbnz	r3, 8004e8c <__swbuf_r+0x12>
 8004e88:	f7ff ff0e 	bl	8004ca8 <__sinit>
 8004e8c:	69a3      	ldr	r3, [r4, #24]
 8004e8e:	60a3      	str	r3, [r4, #8]
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	071a      	lsls	r2, r3, #28
 8004e94:	d501      	bpl.n	8004e9a <__swbuf_r+0x20>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	b943      	cbnz	r3, 8004eac <__swbuf_r+0x32>
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f82b 	bl	8004ef8 <__swsetup_r>
 8004ea2:	b118      	cbz	r0, 8004eac <__swbuf_r+0x32>
 8004ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	6922      	ldr	r2, [r4, #16]
 8004eb0:	b2f6      	uxtb	r6, r6
 8004eb2:	1a98      	subs	r0, r3, r2
 8004eb4:	6963      	ldr	r3, [r4, #20]
 8004eb6:	4637      	mov	r7, r6
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	dc05      	bgt.n	8004ec8 <__swbuf_r+0x4e>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 fd42 	bl	8005948 <_fflush_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d1ed      	bne.n	8004ea4 <__swbuf_r+0x2a>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	701e      	strb	r6, [r3, #0]
 8004ed6:	6962      	ldr	r2, [r4, #20]
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d004      	beq.n	8004ee8 <__swbuf_r+0x6e>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	07db      	lsls	r3, r3, #31
 8004ee2:	d5e1      	bpl.n	8004ea8 <__swbuf_r+0x2e>
 8004ee4:	2e0a      	cmp	r6, #10
 8004ee6:	d1df      	bne.n	8004ea8 <__swbuf_r+0x2e>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 fd2c 	bl	8005948 <_fflush_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0d9      	beq.n	8004ea8 <__swbuf_r+0x2e>
 8004ef4:	e7d6      	b.n	8004ea4 <__swbuf_r+0x2a>
	...

08004ef8 <__swsetup_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <__swsetup_r+0xa8>)
 8004efc:	4605      	mov	r5, r0
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	460c      	mov	r4, r1
 8004f02:	b118      	cbz	r0, 8004f0c <__swsetup_r+0x14>
 8004f04:	6a03      	ldr	r3, [r0, #32]
 8004f06:	b90b      	cbnz	r3, 8004f0c <__swsetup_r+0x14>
 8004f08:	f7ff fece 	bl	8004ca8 <__sinit>
 8004f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f10:	0719      	lsls	r1, r3, #28
 8004f12:	d422      	bmi.n	8004f5a <__swsetup_r+0x62>
 8004f14:	06da      	lsls	r2, r3, #27
 8004f16:	d407      	bmi.n	8004f28 <__swsetup_r+0x30>
 8004f18:	2209      	movs	r2, #9
 8004f1a:	602a      	str	r2, [r5, #0]
 8004f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	e033      	b.n	8004f90 <__swsetup_r+0x98>
 8004f28:	0758      	lsls	r0, r3, #29
 8004f2a:	d512      	bpl.n	8004f52 <__swsetup_r+0x5a>
 8004f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f2e:	b141      	cbz	r1, 8004f42 <__swsetup_r+0x4a>
 8004f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f34:	4299      	cmp	r1, r3
 8004f36:	d002      	beq.n	8004f3e <__swsetup_r+0x46>
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f8bd 	bl	80050b8 <_free_r>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6063      	str	r3, [r4, #4]
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f043 0308 	orr.w	r3, r3, #8
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	b94b      	cbnz	r3, 8004f72 <__swsetup_r+0x7a>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f68:	d003      	beq.n	8004f72 <__swsetup_r+0x7a>
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 fd38 	bl	80059e2 <__smakebuf_r>
 8004f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f76:	f013 0201 	ands.w	r2, r3, #1
 8004f7a:	d00a      	beq.n	8004f92 <__swsetup_r+0x9a>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60a2      	str	r2, [r4, #8]
 8004f80:	6962      	ldr	r2, [r4, #20]
 8004f82:	4252      	negs	r2, r2
 8004f84:	61a2      	str	r2, [r4, #24]
 8004f86:	6922      	ldr	r2, [r4, #16]
 8004f88:	b942      	cbnz	r2, 8004f9c <__swsetup_r+0xa4>
 8004f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f8e:	d1c5      	bne.n	8004f1c <__swsetup_r+0x24>
 8004f90:	bd38      	pop	{r3, r4, r5, pc}
 8004f92:	0799      	lsls	r1, r3, #30
 8004f94:	bf58      	it	pl
 8004f96:	6962      	ldrpl	r2, [r4, #20]
 8004f98:	60a2      	str	r2, [r4, #8]
 8004f9a:	e7f4      	b.n	8004f86 <__swsetup_r+0x8e>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e7f7      	b.n	8004f90 <__swsetup_r+0x98>
 8004fa0:	20000018 	.word	0x20000018

08004fa4 <memset>:
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4402      	add	r2, r0
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d100      	bne.n	8004fae <memset+0xa>
 8004fac:	4770      	bx	lr
 8004fae:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb2:	e7f9      	b.n	8004fa8 <memset+0x4>

08004fb4 <_close_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4d05      	ldr	r5, [pc, #20]	@ (8004fd0 <_close_r+0x1c>)
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	f7fd fc37 	bl	8002832 <_close>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_close_r+0x1a>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_close_r+0x1a>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	20001630 	.word	0x20001630

08004fd4 <_lseek_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4d05      	ldr	r5, [pc, #20]	@ (8004ff4 <_lseek_r+0x20>)
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7fd fc49 	bl	800287a <_lseek>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_lseek_r+0x1e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_lseek_r+0x1e>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20001630 	.word	0x20001630

08004ff8 <_read_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	2200      	movs	r2, #0
 8005002:	4d05      	ldr	r5, [pc, #20]	@ (8005018 <_read_r+0x20>)
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fd fbda 	bl	80027c0 <_read>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_read_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_read_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20001630 	.word	0x20001630

0800501c <_write_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4604      	mov	r4, r0
 8005020:	4608      	mov	r0, r1
 8005022:	4611      	mov	r1, r2
 8005024:	2200      	movs	r2, #0
 8005026:	4d05      	ldr	r5, [pc, #20]	@ (800503c <_write_r+0x20>)
 8005028:	602a      	str	r2, [r5, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7fd fbe5 	bl	80027fa <_write>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_write_r+0x1e>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_write_r+0x1e>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	20001630 	.word	0x20001630

08005040 <__errno>:
 8005040:	4b01      	ldr	r3, [pc, #4]	@ (8005048 <__errno+0x8>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000018 	.word	0x20000018

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	2600      	movs	r6, #0
 8005050:	4d0c      	ldr	r5, [pc, #48]	@ (8005084 <__libc_init_array+0x38>)
 8005052:	4c0d      	ldr	r4, [pc, #52]	@ (8005088 <__libc_init_array+0x3c>)
 8005054:	1b64      	subs	r4, r4, r5
 8005056:	10a4      	asrs	r4, r4, #2
 8005058:	42a6      	cmp	r6, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	f000 fe38 	bl	8005cd0 <_init>
 8005060:	2600      	movs	r6, #0
 8005062:	4d0a      	ldr	r5, [pc, #40]	@ (800508c <__libc_init_array+0x40>)
 8005064:	4c0a      	ldr	r4, [pc, #40]	@ (8005090 <__libc_init_array+0x44>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	42a6      	cmp	r6, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f855 3b04 	ldr.w	r3, [r5], #4
 8005074:	4798      	blx	r3
 8005076:	3601      	adds	r6, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f855 3b04 	ldr.w	r3, [r5], #4
 800507e:	4798      	blx	r3
 8005080:	3601      	adds	r6, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	08005da0 	.word	0x08005da0
 8005088:	08005da0 	.word	0x08005da0
 800508c:	08005da0 	.word	0x08005da0
 8005090:	08005da4 	.word	0x08005da4

08005094 <__retarget_lock_init_recursive>:
 8005094:	4770      	bx	lr

08005096 <__retarget_lock_acquire_recursive>:
 8005096:	4770      	bx	lr

08005098 <__retarget_lock_release_recursive>:
 8005098:	4770      	bx	lr

0800509a <memcpy>:
 800509a:	440a      	add	r2, r1
 800509c:	4291      	cmp	r1, r2
 800509e:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a2:	d100      	bne.n	80050a6 <memcpy+0xc>
 80050a4:	4770      	bx	lr
 80050a6:	b510      	push	{r4, lr}
 80050a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ac:	4291      	cmp	r1, r2
 80050ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b2:	d1f9      	bne.n	80050a8 <memcpy+0xe>
 80050b4:	bd10      	pop	{r4, pc}
	...

080050b8 <_free_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4605      	mov	r5, r0
 80050bc:	2900      	cmp	r1, #0
 80050be:	d040      	beq.n	8005142 <_free_r+0x8a>
 80050c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c4:	1f0c      	subs	r4, r1, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfb8      	it	lt
 80050ca:	18e4      	addlt	r4, r4, r3
 80050cc:	f000 f8de 	bl	800528c <__malloc_lock>
 80050d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <_free_r+0x8c>)
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	b933      	cbnz	r3, 80050e4 <_free_r+0x2c>
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	6014      	str	r4, [r2, #0]
 80050da:	4628      	mov	r0, r5
 80050dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e0:	f000 b8da 	b.w	8005298 <__malloc_unlock>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d908      	bls.n	80050fa <_free_r+0x42>
 80050e8:	6820      	ldr	r0, [r4, #0]
 80050ea:	1821      	adds	r1, r4, r0
 80050ec:	428b      	cmp	r3, r1
 80050ee:	bf01      	itttt	eq
 80050f0:	6819      	ldreq	r1, [r3, #0]
 80050f2:	685b      	ldreq	r3, [r3, #4]
 80050f4:	1809      	addeq	r1, r1, r0
 80050f6:	6021      	streq	r1, [r4, #0]
 80050f8:	e7ed      	b.n	80050d6 <_free_r+0x1e>
 80050fa:	461a      	mov	r2, r3
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b10b      	cbz	r3, 8005104 <_free_r+0x4c>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d9fa      	bls.n	80050fa <_free_r+0x42>
 8005104:	6811      	ldr	r1, [r2, #0]
 8005106:	1850      	adds	r0, r2, r1
 8005108:	42a0      	cmp	r0, r4
 800510a:	d10b      	bne.n	8005124 <_free_r+0x6c>
 800510c:	6820      	ldr	r0, [r4, #0]
 800510e:	4401      	add	r1, r0
 8005110:	1850      	adds	r0, r2, r1
 8005112:	4283      	cmp	r3, r0
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	d1e0      	bne.n	80050da <_free_r+0x22>
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4408      	add	r0, r1
 800511e:	6010      	str	r0, [r2, #0]
 8005120:	6053      	str	r3, [r2, #4]
 8005122:	e7da      	b.n	80050da <_free_r+0x22>
 8005124:	d902      	bls.n	800512c <_free_r+0x74>
 8005126:	230c      	movs	r3, #12
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	e7d6      	b.n	80050da <_free_r+0x22>
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	1821      	adds	r1, r4, r0
 8005130:	428b      	cmp	r3, r1
 8005132:	bf01      	itttt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	1809      	addeq	r1, r1, r0
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	6063      	str	r3, [r4, #4]
 800513e:	6054      	str	r4, [r2, #4]
 8005140:	e7cb      	b.n	80050da <_free_r+0x22>
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	2000163c 	.word	0x2000163c

08005148 <sbrk_aligned>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4e0f      	ldr	r6, [pc, #60]	@ (8005188 <sbrk_aligned+0x40>)
 800514c:	460c      	mov	r4, r1
 800514e:	6831      	ldr	r1, [r6, #0]
 8005150:	4605      	mov	r5, r0
 8005152:	b911      	cbnz	r1, 800515a <sbrk_aligned+0x12>
 8005154:	f000 fca4 	bl	8005aa0 <_sbrk_r>
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	4621      	mov	r1, r4
 800515c:	4628      	mov	r0, r5
 800515e:	f000 fc9f 	bl	8005aa0 <_sbrk_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d103      	bne.n	800516e <sbrk_aligned+0x26>
 8005166:	f04f 34ff 	mov.w	r4, #4294967295
 800516a:	4620      	mov	r0, r4
 800516c:	bd70      	pop	{r4, r5, r6, pc}
 800516e:	1cc4      	adds	r4, r0, #3
 8005170:	f024 0403 	bic.w	r4, r4, #3
 8005174:	42a0      	cmp	r0, r4
 8005176:	d0f8      	beq.n	800516a <sbrk_aligned+0x22>
 8005178:	1a21      	subs	r1, r4, r0
 800517a:	4628      	mov	r0, r5
 800517c:	f000 fc90 	bl	8005aa0 <_sbrk_r>
 8005180:	3001      	adds	r0, #1
 8005182:	d1f2      	bne.n	800516a <sbrk_aligned+0x22>
 8005184:	e7ef      	b.n	8005166 <sbrk_aligned+0x1e>
 8005186:	bf00      	nop
 8005188:	20001638 	.word	0x20001638

0800518c <_malloc_r>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	1ccd      	adds	r5, r1, #3
 8005192:	f025 0503 	bic.w	r5, r5, #3
 8005196:	3508      	adds	r5, #8
 8005198:	2d0c      	cmp	r5, #12
 800519a:	bf38      	it	cc
 800519c:	250c      	movcc	r5, #12
 800519e:	2d00      	cmp	r5, #0
 80051a0:	4606      	mov	r6, r0
 80051a2:	db01      	blt.n	80051a8 <_malloc_r+0x1c>
 80051a4:	42a9      	cmp	r1, r5
 80051a6:	d904      	bls.n	80051b2 <_malloc_r+0x26>
 80051a8:	230c      	movs	r3, #12
 80051aa:	6033      	str	r3, [r6, #0]
 80051ac:	2000      	movs	r0, #0
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005288 <_malloc_r+0xfc>
 80051b6:	f000 f869 	bl	800528c <__malloc_lock>
 80051ba:	f8d8 3000 	ldr.w	r3, [r8]
 80051be:	461c      	mov	r4, r3
 80051c0:	bb44      	cbnz	r4, 8005214 <_malloc_r+0x88>
 80051c2:	4629      	mov	r1, r5
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff ffbf 	bl	8005148 <sbrk_aligned>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	4604      	mov	r4, r0
 80051ce:	d158      	bne.n	8005282 <_malloc_r+0xf6>
 80051d0:	f8d8 4000 	ldr.w	r4, [r8]
 80051d4:	4627      	mov	r7, r4
 80051d6:	2f00      	cmp	r7, #0
 80051d8:	d143      	bne.n	8005262 <_malloc_r+0xd6>
 80051da:	2c00      	cmp	r4, #0
 80051dc:	d04b      	beq.n	8005276 <_malloc_r+0xea>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	4639      	mov	r1, r7
 80051e2:	4630      	mov	r0, r6
 80051e4:	eb04 0903 	add.w	r9, r4, r3
 80051e8:	f000 fc5a 	bl	8005aa0 <_sbrk_r>
 80051ec:	4581      	cmp	r9, r0
 80051ee:	d142      	bne.n	8005276 <_malloc_r+0xea>
 80051f0:	6821      	ldr	r1, [r4, #0]
 80051f2:	4630      	mov	r0, r6
 80051f4:	1a6d      	subs	r5, r5, r1
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7ff ffa6 	bl	8005148 <sbrk_aligned>
 80051fc:	3001      	adds	r0, #1
 80051fe:	d03a      	beq.n	8005276 <_malloc_r+0xea>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	442b      	add	r3, r5
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	f8d8 3000 	ldr.w	r3, [r8]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	bb62      	cbnz	r2, 8005268 <_malloc_r+0xdc>
 800520e:	f8c8 7000 	str.w	r7, [r8]
 8005212:	e00f      	b.n	8005234 <_malloc_r+0xa8>
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	1b52      	subs	r2, r2, r5
 8005218:	d420      	bmi.n	800525c <_malloc_r+0xd0>
 800521a:	2a0b      	cmp	r2, #11
 800521c:	d917      	bls.n	800524e <_malloc_r+0xc2>
 800521e:	1961      	adds	r1, r4, r5
 8005220:	42a3      	cmp	r3, r4
 8005222:	6025      	str	r5, [r4, #0]
 8005224:	bf18      	it	ne
 8005226:	6059      	strne	r1, [r3, #4]
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	bf08      	it	eq
 800522c:	f8c8 1000 	streq.w	r1, [r8]
 8005230:	5162      	str	r2, [r4, r5]
 8005232:	604b      	str	r3, [r1, #4]
 8005234:	4630      	mov	r0, r6
 8005236:	f000 f82f 	bl	8005298 <__malloc_unlock>
 800523a:	f104 000b 	add.w	r0, r4, #11
 800523e:	1d23      	adds	r3, r4, #4
 8005240:	f020 0007 	bic.w	r0, r0, #7
 8005244:	1ac2      	subs	r2, r0, r3
 8005246:	bf1c      	itt	ne
 8005248:	1a1b      	subne	r3, r3, r0
 800524a:	50a3      	strne	r3, [r4, r2]
 800524c:	e7af      	b.n	80051ae <_malloc_r+0x22>
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	42a3      	cmp	r3, r4
 8005252:	bf0c      	ite	eq
 8005254:	f8c8 2000 	streq.w	r2, [r8]
 8005258:	605a      	strne	r2, [r3, #4]
 800525a:	e7eb      	b.n	8005234 <_malloc_r+0xa8>
 800525c:	4623      	mov	r3, r4
 800525e:	6864      	ldr	r4, [r4, #4]
 8005260:	e7ae      	b.n	80051c0 <_malloc_r+0x34>
 8005262:	463c      	mov	r4, r7
 8005264:	687f      	ldr	r7, [r7, #4]
 8005266:	e7b6      	b.n	80051d6 <_malloc_r+0x4a>
 8005268:	461a      	mov	r2, r3
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	42a3      	cmp	r3, r4
 800526e:	d1fb      	bne.n	8005268 <_malloc_r+0xdc>
 8005270:	2300      	movs	r3, #0
 8005272:	6053      	str	r3, [r2, #4]
 8005274:	e7de      	b.n	8005234 <_malloc_r+0xa8>
 8005276:	230c      	movs	r3, #12
 8005278:	4630      	mov	r0, r6
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	f000 f80c 	bl	8005298 <__malloc_unlock>
 8005280:	e794      	b.n	80051ac <_malloc_r+0x20>
 8005282:	6005      	str	r5, [r0, #0]
 8005284:	e7d6      	b.n	8005234 <_malloc_r+0xa8>
 8005286:	bf00      	nop
 8005288:	2000163c 	.word	0x2000163c

0800528c <__malloc_lock>:
 800528c:	4801      	ldr	r0, [pc, #4]	@ (8005294 <__malloc_lock+0x8>)
 800528e:	f7ff bf02 	b.w	8005096 <__retarget_lock_acquire_recursive>
 8005292:	bf00      	nop
 8005294:	20001634 	.word	0x20001634

08005298 <__malloc_unlock>:
 8005298:	4801      	ldr	r0, [pc, #4]	@ (80052a0 <__malloc_unlock+0x8>)
 800529a:	f7ff befd 	b.w	8005098 <__retarget_lock_release_recursive>
 800529e:	bf00      	nop
 80052a0:	20001634 	.word	0x20001634

080052a4 <__sfputc_r>:
 80052a4:	6893      	ldr	r3, [r2, #8]
 80052a6:	b410      	push	{r4}
 80052a8:	3b01      	subs	r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	6093      	str	r3, [r2, #8]
 80052ae:	da07      	bge.n	80052c0 <__sfputc_r+0x1c>
 80052b0:	6994      	ldr	r4, [r2, #24]
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	db01      	blt.n	80052ba <__sfputc_r+0x16>
 80052b6:	290a      	cmp	r1, #10
 80052b8:	d102      	bne.n	80052c0 <__sfputc_r+0x1c>
 80052ba:	bc10      	pop	{r4}
 80052bc:	f7ff bddd 	b.w	8004e7a <__swbuf_r>
 80052c0:	6813      	ldr	r3, [r2, #0]
 80052c2:	1c58      	adds	r0, r3, #1
 80052c4:	6010      	str	r0, [r2, #0]
 80052c6:	7019      	strb	r1, [r3, #0]
 80052c8:	4608      	mov	r0, r1
 80052ca:	bc10      	pop	{r4}
 80052cc:	4770      	bx	lr

080052ce <__sfputs_r>:
 80052ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d0:	4606      	mov	r6, r0
 80052d2:	460f      	mov	r7, r1
 80052d4:	4614      	mov	r4, r2
 80052d6:	18d5      	adds	r5, r2, r3
 80052d8:	42ac      	cmp	r4, r5
 80052da:	d101      	bne.n	80052e0 <__sfputs_r+0x12>
 80052dc:	2000      	movs	r0, #0
 80052de:	e007      	b.n	80052f0 <__sfputs_r+0x22>
 80052e0:	463a      	mov	r2, r7
 80052e2:	4630      	mov	r0, r6
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	f7ff ffdc 	bl	80052a4 <__sfputc_r>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d1f3      	bne.n	80052d8 <__sfputs_r+0xa>
 80052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052f4 <_vfiprintf_r>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	460d      	mov	r5, r1
 80052fa:	4614      	mov	r4, r2
 80052fc:	4698      	mov	r8, r3
 80052fe:	4606      	mov	r6, r0
 8005300:	b09d      	sub	sp, #116	@ 0x74
 8005302:	b118      	cbz	r0, 800530c <_vfiprintf_r+0x18>
 8005304:	6a03      	ldr	r3, [r0, #32]
 8005306:	b90b      	cbnz	r3, 800530c <_vfiprintf_r+0x18>
 8005308:	f7ff fcce 	bl	8004ca8 <__sinit>
 800530c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800530e:	07d9      	lsls	r1, r3, #31
 8005310:	d405      	bmi.n	800531e <_vfiprintf_r+0x2a>
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	059a      	lsls	r2, r3, #22
 8005316:	d402      	bmi.n	800531e <_vfiprintf_r+0x2a>
 8005318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800531a:	f7ff febc 	bl	8005096 <__retarget_lock_acquire_recursive>
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	071b      	lsls	r3, r3, #28
 8005322:	d501      	bpl.n	8005328 <_vfiprintf_r+0x34>
 8005324:	692b      	ldr	r3, [r5, #16]
 8005326:	b99b      	cbnz	r3, 8005350 <_vfiprintf_r+0x5c>
 8005328:	4629      	mov	r1, r5
 800532a:	4630      	mov	r0, r6
 800532c:	f7ff fde4 	bl	8004ef8 <__swsetup_r>
 8005330:	b170      	cbz	r0, 8005350 <_vfiprintf_r+0x5c>
 8005332:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005334:	07dc      	lsls	r4, r3, #31
 8005336:	d504      	bpl.n	8005342 <_vfiprintf_r+0x4e>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	b01d      	add	sp, #116	@ 0x74
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	89ab      	ldrh	r3, [r5, #12]
 8005344:	0598      	lsls	r0, r3, #22
 8005346:	d4f7      	bmi.n	8005338 <_vfiprintf_r+0x44>
 8005348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800534a:	f7ff fea5 	bl	8005098 <__retarget_lock_release_recursive>
 800534e:	e7f3      	b.n	8005338 <_vfiprintf_r+0x44>
 8005350:	2300      	movs	r3, #0
 8005352:	9309      	str	r3, [sp, #36]	@ 0x24
 8005354:	2320      	movs	r3, #32
 8005356:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800535a:	2330      	movs	r3, #48	@ 0x30
 800535c:	f04f 0901 	mov.w	r9, #1
 8005360:	f8cd 800c 	str.w	r8, [sp, #12]
 8005364:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005510 <_vfiprintf_r+0x21c>
 8005368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800536c:	4623      	mov	r3, r4
 800536e:	469a      	mov	sl, r3
 8005370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005374:	b10a      	cbz	r2, 800537a <_vfiprintf_r+0x86>
 8005376:	2a25      	cmp	r2, #37	@ 0x25
 8005378:	d1f9      	bne.n	800536e <_vfiprintf_r+0x7a>
 800537a:	ebba 0b04 	subs.w	fp, sl, r4
 800537e:	d00b      	beq.n	8005398 <_vfiprintf_r+0xa4>
 8005380:	465b      	mov	r3, fp
 8005382:	4622      	mov	r2, r4
 8005384:	4629      	mov	r1, r5
 8005386:	4630      	mov	r0, r6
 8005388:	f7ff ffa1 	bl	80052ce <__sfputs_r>
 800538c:	3001      	adds	r0, #1
 800538e:	f000 80a7 	beq.w	80054e0 <_vfiprintf_r+0x1ec>
 8005392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005394:	445a      	add	r2, fp
 8005396:	9209      	str	r2, [sp, #36]	@ 0x24
 8005398:	f89a 3000 	ldrb.w	r3, [sl]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 809f 	beq.w	80054e0 <_vfiprintf_r+0x1ec>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295
 80053a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ac:	f10a 0a01 	add.w	sl, sl, #1
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	9307      	str	r3, [sp, #28]
 80053b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80053ba:	4654      	mov	r4, sl
 80053bc:	2205      	movs	r2, #5
 80053be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c2:	4853      	ldr	r0, [pc, #332]	@ (8005510 <_vfiprintf_r+0x21c>)
 80053c4:	f000 fb7c 	bl	8005ac0 <memchr>
 80053c8:	9a04      	ldr	r2, [sp, #16]
 80053ca:	b9d8      	cbnz	r0, 8005404 <_vfiprintf_r+0x110>
 80053cc:	06d1      	lsls	r1, r2, #27
 80053ce:	bf44      	itt	mi
 80053d0:	2320      	movmi	r3, #32
 80053d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053d6:	0713      	lsls	r3, r2, #28
 80053d8:	bf44      	itt	mi
 80053da:	232b      	movmi	r3, #43	@ 0x2b
 80053dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053e0:	f89a 3000 	ldrb.w	r3, [sl]
 80053e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053e6:	d015      	beq.n	8005414 <_vfiprintf_r+0x120>
 80053e8:	4654      	mov	r4, sl
 80053ea:	2000      	movs	r0, #0
 80053ec:	f04f 0c0a 	mov.w	ip, #10
 80053f0:	9a07      	ldr	r2, [sp, #28]
 80053f2:	4621      	mov	r1, r4
 80053f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053f8:	3b30      	subs	r3, #48	@ 0x30
 80053fa:	2b09      	cmp	r3, #9
 80053fc:	d94b      	bls.n	8005496 <_vfiprintf_r+0x1a2>
 80053fe:	b1b0      	cbz	r0, 800542e <_vfiprintf_r+0x13a>
 8005400:	9207      	str	r2, [sp, #28]
 8005402:	e014      	b.n	800542e <_vfiprintf_r+0x13a>
 8005404:	eba0 0308 	sub.w	r3, r0, r8
 8005408:	fa09 f303 	lsl.w	r3, r9, r3
 800540c:	4313      	orrs	r3, r2
 800540e:	46a2      	mov	sl, r4
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	e7d2      	b.n	80053ba <_vfiprintf_r+0xc6>
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	1d19      	adds	r1, r3, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	9103      	str	r1, [sp, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	bfbb      	ittet	lt
 8005420:	425b      	neglt	r3, r3
 8005422:	f042 0202 	orrlt.w	r2, r2, #2
 8005426:	9307      	strge	r3, [sp, #28]
 8005428:	9307      	strlt	r3, [sp, #28]
 800542a:	bfb8      	it	lt
 800542c:	9204      	strlt	r2, [sp, #16]
 800542e:	7823      	ldrb	r3, [r4, #0]
 8005430:	2b2e      	cmp	r3, #46	@ 0x2e
 8005432:	d10a      	bne.n	800544a <_vfiprintf_r+0x156>
 8005434:	7863      	ldrb	r3, [r4, #1]
 8005436:	2b2a      	cmp	r3, #42	@ 0x2a
 8005438:	d132      	bne.n	80054a0 <_vfiprintf_r+0x1ac>
 800543a:	9b03      	ldr	r3, [sp, #12]
 800543c:	3402      	adds	r4, #2
 800543e:	1d1a      	adds	r2, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	9203      	str	r2, [sp, #12]
 8005444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005448:	9305      	str	r3, [sp, #20]
 800544a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005514 <_vfiprintf_r+0x220>
 800544e:	2203      	movs	r2, #3
 8005450:	4650      	mov	r0, sl
 8005452:	7821      	ldrb	r1, [r4, #0]
 8005454:	f000 fb34 	bl	8005ac0 <memchr>
 8005458:	b138      	cbz	r0, 800546a <_vfiprintf_r+0x176>
 800545a:	2240      	movs	r2, #64	@ 0x40
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	eba0 000a 	sub.w	r0, r0, sl
 8005462:	4082      	lsls	r2, r0
 8005464:	4313      	orrs	r3, r2
 8005466:	3401      	adds	r4, #1
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546e:	2206      	movs	r2, #6
 8005470:	4829      	ldr	r0, [pc, #164]	@ (8005518 <_vfiprintf_r+0x224>)
 8005472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005476:	f000 fb23 	bl	8005ac0 <memchr>
 800547a:	2800      	cmp	r0, #0
 800547c:	d03f      	beq.n	80054fe <_vfiprintf_r+0x20a>
 800547e:	4b27      	ldr	r3, [pc, #156]	@ (800551c <_vfiprintf_r+0x228>)
 8005480:	bb1b      	cbnz	r3, 80054ca <_vfiprintf_r+0x1d6>
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	3307      	adds	r3, #7
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	3308      	adds	r3, #8
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005490:	443b      	add	r3, r7
 8005492:	9309      	str	r3, [sp, #36]	@ 0x24
 8005494:	e76a      	b.n	800536c <_vfiprintf_r+0x78>
 8005496:	460c      	mov	r4, r1
 8005498:	2001      	movs	r0, #1
 800549a:	fb0c 3202 	mla	r2, ip, r2, r3
 800549e:	e7a8      	b.n	80053f2 <_vfiprintf_r+0xfe>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f04f 0c0a 	mov.w	ip, #10
 80054a6:	4619      	mov	r1, r3
 80054a8:	3401      	adds	r4, #1
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	4620      	mov	r0, r4
 80054ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054b2:	3a30      	subs	r2, #48	@ 0x30
 80054b4:	2a09      	cmp	r2, #9
 80054b6:	d903      	bls.n	80054c0 <_vfiprintf_r+0x1cc>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0c6      	beq.n	800544a <_vfiprintf_r+0x156>
 80054bc:	9105      	str	r1, [sp, #20]
 80054be:	e7c4      	b.n	800544a <_vfiprintf_r+0x156>
 80054c0:	4604      	mov	r4, r0
 80054c2:	2301      	movs	r3, #1
 80054c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054c8:	e7f0      	b.n	80054ac <_vfiprintf_r+0x1b8>
 80054ca:	ab03      	add	r3, sp, #12
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	462a      	mov	r2, r5
 80054d0:	4630      	mov	r0, r6
 80054d2:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <_vfiprintf_r+0x22c>)
 80054d4:	a904      	add	r1, sp, #16
 80054d6:	f3af 8000 	nop.w
 80054da:	4607      	mov	r7, r0
 80054dc:	1c78      	adds	r0, r7, #1
 80054de:	d1d6      	bne.n	800548e <_vfiprintf_r+0x19a>
 80054e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054e2:	07d9      	lsls	r1, r3, #31
 80054e4:	d405      	bmi.n	80054f2 <_vfiprintf_r+0x1fe>
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	059a      	lsls	r2, r3, #22
 80054ea:	d402      	bmi.n	80054f2 <_vfiprintf_r+0x1fe>
 80054ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ee:	f7ff fdd3 	bl	8005098 <__retarget_lock_release_recursive>
 80054f2:	89ab      	ldrh	r3, [r5, #12]
 80054f4:	065b      	lsls	r3, r3, #25
 80054f6:	f53f af1f 	bmi.w	8005338 <_vfiprintf_r+0x44>
 80054fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054fc:	e71e      	b.n	800533c <_vfiprintf_r+0x48>
 80054fe:	ab03      	add	r3, sp, #12
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	462a      	mov	r2, r5
 8005504:	4630      	mov	r0, r6
 8005506:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <_vfiprintf_r+0x22c>)
 8005508:	a904      	add	r1, sp, #16
 800550a:	f000 f87d 	bl	8005608 <_printf_i>
 800550e:	e7e4      	b.n	80054da <_vfiprintf_r+0x1e6>
 8005510:	08005d6a 	.word	0x08005d6a
 8005514:	08005d70 	.word	0x08005d70
 8005518:	08005d74 	.word	0x08005d74
 800551c:	00000000 	.word	0x00000000
 8005520:	080052cf 	.word	0x080052cf

08005524 <_printf_common>:
 8005524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	4616      	mov	r6, r2
 800552a:	4698      	mov	r8, r3
 800552c:	688a      	ldr	r2, [r1, #8]
 800552e:	690b      	ldr	r3, [r1, #16]
 8005530:	4607      	mov	r7, r0
 8005532:	4293      	cmp	r3, r2
 8005534:	bfb8      	it	lt
 8005536:	4613      	movlt	r3, r2
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800553e:	460c      	mov	r4, r1
 8005540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005544:	b10a      	cbz	r2, 800554a <_printf_common+0x26>
 8005546:	3301      	adds	r3, #1
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	0699      	lsls	r1, r3, #26
 800554e:	bf42      	ittt	mi
 8005550:	6833      	ldrmi	r3, [r6, #0]
 8005552:	3302      	addmi	r3, #2
 8005554:	6033      	strmi	r3, [r6, #0]
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	f015 0506 	ands.w	r5, r5, #6
 800555c:	d106      	bne.n	800556c <_printf_common+0x48>
 800555e:	f104 0a19 	add.w	sl, r4, #25
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	6832      	ldr	r2, [r6, #0]
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	42ab      	cmp	r3, r5
 800556a:	dc2b      	bgt.n	80055c4 <_printf_common+0xa0>
 800556c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	3b00      	subs	r3, #0
 8005574:	bf18      	it	ne
 8005576:	2301      	movne	r3, #1
 8005578:	0692      	lsls	r2, r2, #26
 800557a:	d430      	bmi.n	80055de <_printf_common+0xba>
 800557c:	4641      	mov	r1, r8
 800557e:	4638      	mov	r0, r7
 8005580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005584:	47c8      	blx	r9
 8005586:	3001      	adds	r0, #1
 8005588:	d023      	beq.n	80055d2 <_printf_common+0xae>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	6922      	ldr	r2, [r4, #16]
 800558e:	f003 0306 	and.w	r3, r3, #6
 8005592:	2b04      	cmp	r3, #4
 8005594:	bf14      	ite	ne
 8005596:	2500      	movne	r5, #0
 8005598:	6833      	ldreq	r3, [r6, #0]
 800559a:	f04f 0600 	mov.w	r6, #0
 800559e:	bf08      	it	eq
 80055a0:	68e5      	ldreq	r5, [r4, #12]
 80055a2:	f104 041a 	add.w	r4, r4, #26
 80055a6:	bf08      	it	eq
 80055a8:	1aed      	subeq	r5, r5, r3
 80055aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055ae:	bf08      	it	eq
 80055b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b4:	4293      	cmp	r3, r2
 80055b6:	bfc4      	itt	gt
 80055b8:	1a9b      	subgt	r3, r3, r2
 80055ba:	18ed      	addgt	r5, r5, r3
 80055bc:	42b5      	cmp	r5, r6
 80055be:	d11a      	bne.n	80055f6 <_printf_common+0xd2>
 80055c0:	2000      	movs	r0, #0
 80055c2:	e008      	b.n	80055d6 <_printf_common+0xb2>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4652      	mov	r2, sl
 80055c8:	4641      	mov	r1, r8
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c8      	blx	r9
 80055ce:	3001      	adds	r0, #1
 80055d0:	d103      	bne.n	80055da <_printf_common+0xb6>
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055da:	3501      	adds	r5, #1
 80055dc:	e7c1      	b.n	8005562 <_printf_common+0x3e>
 80055de:	2030      	movs	r0, #48	@ 0x30
 80055e0:	18e1      	adds	r1, r4, r3
 80055e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055ec:	4422      	add	r2, r4
 80055ee:	3302      	adds	r3, #2
 80055f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055f4:	e7c2      	b.n	800557c <_printf_common+0x58>
 80055f6:	2301      	movs	r3, #1
 80055f8:	4622      	mov	r2, r4
 80055fa:	4641      	mov	r1, r8
 80055fc:	4638      	mov	r0, r7
 80055fe:	47c8      	blx	r9
 8005600:	3001      	adds	r0, #1
 8005602:	d0e6      	beq.n	80055d2 <_printf_common+0xae>
 8005604:	3601      	adds	r6, #1
 8005606:	e7d9      	b.n	80055bc <_printf_common+0x98>

08005608 <_printf_i>:
 8005608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	7e0f      	ldrb	r7, [r1, #24]
 800560e:	4691      	mov	r9, r2
 8005610:	2f78      	cmp	r7, #120	@ 0x78
 8005612:	4680      	mov	r8, r0
 8005614:	460c      	mov	r4, r1
 8005616:	469a      	mov	sl, r3
 8005618:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800561a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800561e:	d807      	bhi.n	8005630 <_printf_i+0x28>
 8005620:	2f62      	cmp	r7, #98	@ 0x62
 8005622:	d80a      	bhi.n	800563a <_printf_i+0x32>
 8005624:	2f00      	cmp	r7, #0
 8005626:	f000 80d3 	beq.w	80057d0 <_printf_i+0x1c8>
 800562a:	2f58      	cmp	r7, #88	@ 0x58
 800562c:	f000 80ba 	beq.w	80057a4 <_printf_i+0x19c>
 8005630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005638:	e03a      	b.n	80056b0 <_printf_i+0xa8>
 800563a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800563e:	2b15      	cmp	r3, #21
 8005640:	d8f6      	bhi.n	8005630 <_printf_i+0x28>
 8005642:	a101      	add	r1, pc, #4	@ (adr r1, 8005648 <_printf_i+0x40>)
 8005644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005648:	080056a1 	.word	0x080056a1
 800564c:	080056b5 	.word	0x080056b5
 8005650:	08005631 	.word	0x08005631
 8005654:	08005631 	.word	0x08005631
 8005658:	08005631 	.word	0x08005631
 800565c:	08005631 	.word	0x08005631
 8005660:	080056b5 	.word	0x080056b5
 8005664:	08005631 	.word	0x08005631
 8005668:	08005631 	.word	0x08005631
 800566c:	08005631 	.word	0x08005631
 8005670:	08005631 	.word	0x08005631
 8005674:	080057b7 	.word	0x080057b7
 8005678:	080056df 	.word	0x080056df
 800567c:	08005771 	.word	0x08005771
 8005680:	08005631 	.word	0x08005631
 8005684:	08005631 	.word	0x08005631
 8005688:	080057d9 	.word	0x080057d9
 800568c:	08005631 	.word	0x08005631
 8005690:	080056df 	.word	0x080056df
 8005694:	08005631 	.word	0x08005631
 8005698:	08005631 	.word	0x08005631
 800569c:	08005779 	.word	0x08005779
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6032      	str	r2, [r6, #0]
 80056a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b0:	2301      	movs	r3, #1
 80056b2:	e09e      	b.n	80057f2 <_printf_i+0x1ea>
 80056b4:	6833      	ldr	r3, [r6, #0]
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	6031      	str	r1, [r6, #0]
 80056bc:	0606      	lsls	r6, r0, #24
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0xbc>
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	e003      	b.n	80056cc <_printf_i+0xc4>
 80056c4:	0645      	lsls	r5, r0, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0xb8>
 80056c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	da03      	bge.n	80056d8 <_printf_i+0xd0>
 80056d0:	232d      	movs	r3, #45	@ 0x2d
 80056d2:	426d      	negs	r5, r5
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d8:	230a      	movs	r3, #10
 80056da:	4859      	ldr	r0, [pc, #356]	@ (8005840 <_printf_i+0x238>)
 80056dc:	e011      	b.n	8005702 <_printf_i+0xfa>
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	6833      	ldr	r3, [r6, #0]
 80056e2:	0608      	lsls	r0, r1, #24
 80056e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80056e8:	d402      	bmi.n	80056f0 <_printf_i+0xe8>
 80056ea:	0649      	lsls	r1, r1, #25
 80056ec:	bf48      	it	mi
 80056ee:	b2ad      	uxthmi	r5, r5
 80056f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80056f2:	6033      	str	r3, [r6, #0]
 80056f4:	bf14      	ite	ne
 80056f6:	230a      	movne	r3, #10
 80056f8:	2308      	moveq	r3, #8
 80056fa:	4851      	ldr	r0, [pc, #324]	@ (8005840 <_printf_i+0x238>)
 80056fc:	2100      	movs	r1, #0
 80056fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005702:	6866      	ldr	r6, [r4, #4]
 8005704:	2e00      	cmp	r6, #0
 8005706:	bfa8      	it	ge
 8005708:	6821      	ldrge	r1, [r4, #0]
 800570a:	60a6      	str	r6, [r4, #8]
 800570c:	bfa4      	itt	ge
 800570e:	f021 0104 	bicge.w	r1, r1, #4
 8005712:	6021      	strge	r1, [r4, #0]
 8005714:	b90d      	cbnz	r5, 800571a <_printf_i+0x112>
 8005716:	2e00      	cmp	r6, #0
 8005718:	d04b      	beq.n	80057b2 <_printf_i+0x1aa>
 800571a:	4616      	mov	r6, r2
 800571c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005720:	fb03 5711 	mls	r7, r3, r1, r5
 8005724:	5dc7      	ldrb	r7, [r0, r7]
 8005726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800572a:	462f      	mov	r7, r5
 800572c:	42bb      	cmp	r3, r7
 800572e:	460d      	mov	r5, r1
 8005730:	d9f4      	bls.n	800571c <_printf_i+0x114>
 8005732:	2b08      	cmp	r3, #8
 8005734:	d10b      	bne.n	800574e <_printf_i+0x146>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	07df      	lsls	r7, r3, #31
 800573a:	d508      	bpl.n	800574e <_printf_i+0x146>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	6861      	ldr	r1, [r4, #4]
 8005740:	4299      	cmp	r1, r3
 8005742:	bfde      	ittt	le
 8005744:	2330      	movle	r3, #48	@ 0x30
 8005746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800574a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800574e:	1b92      	subs	r2, r2, r6
 8005750:	6122      	str	r2, [r4, #16]
 8005752:	464b      	mov	r3, r9
 8005754:	4621      	mov	r1, r4
 8005756:	4640      	mov	r0, r8
 8005758:	f8cd a000 	str.w	sl, [sp]
 800575c:	aa03      	add	r2, sp, #12
 800575e:	f7ff fee1 	bl	8005524 <_printf_common>
 8005762:	3001      	adds	r0, #1
 8005764:	d14a      	bne.n	80057fc <_printf_i+0x1f4>
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
 800576a:	b004      	add	sp, #16
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f043 0320 	orr.w	r3, r3, #32
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	2778      	movs	r7, #120	@ 0x78
 800577a:	4832      	ldr	r0, [pc, #200]	@ (8005844 <_printf_i+0x23c>)
 800577c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	6831      	ldr	r1, [r6, #0]
 8005784:	061f      	lsls	r7, r3, #24
 8005786:	f851 5b04 	ldr.w	r5, [r1], #4
 800578a:	d402      	bmi.n	8005792 <_printf_i+0x18a>
 800578c:	065f      	lsls	r7, r3, #25
 800578e:	bf48      	it	mi
 8005790:	b2ad      	uxthmi	r5, r5
 8005792:	6031      	str	r1, [r6, #0]
 8005794:	07d9      	lsls	r1, r3, #31
 8005796:	bf44      	itt	mi
 8005798:	f043 0320 	orrmi.w	r3, r3, #32
 800579c:	6023      	strmi	r3, [r4, #0]
 800579e:	b11d      	cbz	r5, 80057a8 <_printf_i+0x1a0>
 80057a0:	2310      	movs	r3, #16
 80057a2:	e7ab      	b.n	80056fc <_printf_i+0xf4>
 80057a4:	4826      	ldr	r0, [pc, #152]	@ (8005840 <_printf_i+0x238>)
 80057a6:	e7e9      	b.n	800577c <_printf_i+0x174>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	f023 0320 	bic.w	r3, r3, #32
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	e7f6      	b.n	80057a0 <_printf_i+0x198>
 80057b2:	4616      	mov	r6, r2
 80057b4:	e7bd      	b.n	8005732 <_printf_i+0x12a>
 80057b6:	6833      	ldr	r3, [r6, #0]
 80057b8:	6825      	ldr	r5, [r4, #0]
 80057ba:	1d18      	adds	r0, r3, #4
 80057bc:	6961      	ldr	r1, [r4, #20]
 80057be:	6030      	str	r0, [r6, #0]
 80057c0:	062e      	lsls	r6, r5, #24
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0x1c2>
 80057c6:	6019      	str	r1, [r3, #0]
 80057c8:	e002      	b.n	80057d0 <_printf_i+0x1c8>
 80057ca:	0668      	lsls	r0, r5, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0x1be>
 80057ce:	8019      	strh	r1, [r3, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	4616      	mov	r6, r2
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	e7bc      	b.n	8005752 <_printf_i+0x14a>
 80057d8:	6833      	ldr	r3, [r6, #0]
 80057da:	2100      	movs	r1, #0
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	6032      	str	r2, [r6, #0]
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 f96b 	bl	8005ac0 <memchr>
 80057ea:	b108      	cbz	r0, 80057f0 <_printf_i+0x1e8>
 80057ec:	1b80      	subs	r0, r0, r6
 80057ee:	6060      	str	r0, [r4, #4]
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	2300      	movs	r3, #0
 80057f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057fa:	e7aa      	b.n	8005752 <_printf_i+0x14a>
 80057fc:	4632      	mov	r2, r6
 80057fe:	4649      	mov	r1, r9
 8005800:	4640      	mov	r0, r8
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	47d0      	blx	sl
 8005806:	3001      	adds	r0, #1
 8005808:	d0ad      	beq.n	8005766 <_printf_i+0x15e>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	079b      	lsls	r3, r3, #30
 800580e:	d413      	bmi.n	8005838 <_printf_i+0x230>
 8005810:	68e0      	ldr	r0, [r4, #12]
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	4298      	cmp	r0, r3
 8005816:	bfb8      	it	lt
 8005818:	4618      	movlt	r0, r3
 800581a:	e7a6      	b.n	800576a <_printf_i+0x162>
 800581c:	2301      	movs	r3, #1
 800581e:	4632      	mov	r2, r6
 8005820:	4649      	mov	r1, r9
 8005822:	4640      	mov	r0, r8
 8005824:	47d0      	blx	sl
 8005826:	3001      	adds	r0, #1
 8005828:	d09d      	beq.n	8005766 <_printf_i+0x15e>
 800582a:	3501      	adds	r5, #1
 800582c:	68e3      	ldr	r3, [r4, #12]
 800582e:	9903      	ldr	r1, [sp, #12]
 8005830:	1a5b      	subs	r3, r3, r1
 8005832:	42ab      	cmp	r3, r5
 8005834:	dcf2      	bgt.n	800581c <_printf_i+0x214>
 8005836:	e7eb      	b.n	8005810 <_printf_i+0x208>
 8005838:	2500      	movs	r5, #0
 800583a:	f104 0619 	add.w	r6, r4, #25
 800583e:	e7f5      	b.n	800582c <_printf_i+0x224>
 8005840:	08005d7b 	.word	0x08005d7b
 8005844:	08005d8c 	.word	0x08005d8c

08005848 <__sflush_r>:
 8005848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	0716      	lsls	r6, r2, #28
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	d454      	bmi.n	8005900 <__sflush_r+0xb8>
 8005856:	684b      	ldr	r3, [r1, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc02      	bgt.n	8005862 <__sflush_r+0x1a>
 800585c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	dd48      	ble.n	80058f4 <__sflush_r+0xac>
 8005862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005864:	2e00      	cmp	r6, #0
 8005866:	d045      	beq.n	80058f4 <__sflush_r+0xac>
 8005868:	2300      	movs	r3, #0
 800586a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800586e:	682f      	ldr	r7, [r5, #0]
 8005870:	6a21      	ldr	r1, [r4, #32]
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	d030      	beq.n	80058d8 <__sflush_r+0x90>
 8005876:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	0759      	lsls	r1, r3, #29
 800587c:	d505      	bpl.n	800588a <__sflush_r+0x42>
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	1ad2      	subs	r2, r2, r3
 8005882:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005884:	b10b      	cbz	r3, 800588a <__sflush_r+0x42>
 8005886:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005888:	1ad2      	subs	r2, r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	4628      	mov	r0, r5
 800588e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005890:	6a21      	ldr	r1, [r4, #32]
 8005892:	47b0      	blx	r6
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	d106      	bne.n	80058a8 <__sflush_r+0x60>
 800589a:	6829      	ldr	r1, [r5, #0]
 800589c:	291d      	cmp	r1, #29
 800589e:	d82b      	bhi.n	80058f8 <__sflush_r+0xb0>
 80058a0:	4a28      	ldr	r2, [pc, #160]	@ (8005944 <__sflush_r+0xfc>)
 80058a2:	410a      	asrs	r2, r1
 80058a4:	07d6      	lsls	r6, r2, #31
 80058a6:	d427      	bmi.n	80058f8 <__sflush_r+0xb0>
 80058a8:	2200      	movs	r2, #0
 80058aa:	6062      	str	r2, [r4, #4]
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	04d9      	lsls	r1, r3, #19
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	d504      	bpl.n	80058be <__sflush_r+0x76>
 80058b4:	1c42      	adds	r2, r0, #1
 80058b6:	d101      	bne.n	80058bc <__sflush_r+0x74>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b903      	cbnz	r3, 80058be <__sflush_r+0x76>
 80058bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80058be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058c0:	602f      	str	r7, [r5, #0]
 80058c2:	b1b9      	cbz	r1, 80058f4 <__sflush_r+0xac>
 80058c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058c8:	4299      	cmp	r1, r3
 80058ca:	d002      	beq.n	80058d2 <__sflush_r+0x8a>
 80058cc:	4628      	mov	r0, r5
 80058ce:	f7ff fbf3 	bl	80050b8 <_free_r>
 80058d2:	2300      	movs	r3, #0
 80058d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80058d6:	e00d      	b.n	80058f4 <__sflush_r+0xac>
 80058d8:	2301      	movs	r3, #1
 80058da:	4628      	mov	r0, r5
 80058dc:	47b0      	blx	r6
 80058de:	4602      	mov	r2, r0
 80058e0:	1c50      	adds	r0, r2, #1
 80058e2:	d1c9      	bne.n	8005878 <__sflush_r+0x30>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0c6      	beq.n	8005878 <__sflush_r+0x30>
 80058ea:	2b1d      	cmp	r3, #29
 80058ec:	d001      	beq.n	80058f2 <__sflush_r+0xaa>
 80058ee:	2b16      	cmp	r3, #22
 80058f0:	d11d      	bne.n	800592e <__sflush_r+0xe6>
 80058f2:	602f      	str	r7, [r5, #0]
 80058f4:	2000      	movs	r0, #0
 80058f6:	e021      	b.n	800593c <__sflush_r+0xf4>
 80058f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fc:	b21b      	sxth	r3, r3
 80058fe:	e01a      	b.n	8005936 <__sflush_r+0xee>
 8005900:	690f      	ldr	r7, [r1, #16]
 8005902:	2f00      	cmp	r7, #0
 8005904:	d0f6      	beq.n	80058f4 <__sflush_r+0xac>
 8005906:	0793      	lsls	r3, r2, #30
 8005908:	bf18      	it	ne
 800590a:	2300      	movne	r3, #0
 800590c:	680e      	ldr	r6, [r1, #0]
 800590e:	bf08      	it	eq
 8005910:	694b      	ldreq	r3, [r1, #20]
 8005912:	1bf6      	subs	r6, r6, r7
 8005914:	600f      	str	r7, [r1, #0]
 8005916:	608b      	str	r3, [r1, #8]
 8005918:	2e00      	cmp	r6, #0
 800591a:	ddeb      	ble.n	80058f4 <__sflush_r+0xac>
 800591c:	4633      	mov	r3, r6
 800591e:	463a      	mov	r2, r7
 8005920:	4628      	mov	r0, r5
 8005922:	6a21      	ldr	r1, [r4, #32]
 8005924:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005928:	47e0      	blx	ip
 800592a:	2800      	cmp	r0, #0
 800592c:	dc07      	bgt.n	800593e <__sflush_r+0xf6>
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005936:	f04f 30ff 	mov.w	r0, #4294967295
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593e:	4407      	add	r7, r0
 8005940:	1a36      	subs	r6, r6, r0
 8005942:	e7e9      	b.n	8005918 <__sflush_r+0xd0>
 8005944:	dfbffffe 	.word	0xdfbffffe

08005948 <_fflush_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	690b      	ldr	r3, [r1, #16]
 800594c:	4605      	mov	r5, r0
 800594e:	460c      	mov	r4, r1
 8005950:	b913      	cbnz	r3, 8005958 <_fflush_r+0x10>
 8005952:	2500      	movs	r5, #0
 8005954:	4628      	mov	r0, r5
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	b118      	cbz	r0, 8005962 <_fflush_r+0x1a>
 800595a:	6a03      	ldr	r3, [r0, #32]
 800595c:	b90b      	cbnz	r3, 8005962 <_fflush_r+0x1a>
 800595e:	f7ff f9a3 	bl	8004ca8 <__sinit>
 8005962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f3      	beq.n	8005952 <_fflush_r+0xa>
 800596a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800596c:	07d0      	lsls	r0, r2, #31
 800596e:	d404      	bmi.n	800597a <_fflush_r+0x32>
 8005970:	0599      	lsls	r1, r3, #22
 8005972:	d402      	bmi.n	800597a <_fflush_r+0x32>
 8005974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005976:	f7ff fb8e 	bl	8005096 <__retarget_lock_acquire_recursive>
 800597a:	4628      	mov	r0, r5
 800597c:	4621      	mov	r1, r4
 800597e:	f7ff ff63 	bl	8005848 <__sflush_r>
 8005982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005984:	4605      	mov	r5, r0
 8005986:	07da      	lsls	r2, r3, #31
 8005988:	d4e4      	bmi.n	8005954 <_fflush_r+0xc>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	059b      	lsls	r3, r3, #22
 800598e:	d4e1      	bmi.n	8005954 <_fflush_r+0xc>
 8005990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005992:	f7ff fb81 	bl	8005098 <__retarget_lock_release_recursive>
 8005996:	e7dd      	b.n	8005954 <_fflush_r+0xc>

08005998 <__swhatbuf_r>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	460c      	mov	r4, r1
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	4615      	mov	r5, r2
 80059a2:	2900      	cmp	r1, #0
 80059a4:	461e      	mov	r6, r3
 80059a6:	b096      	sub	sp, #88	@ 0x58
 80059a8:	da0c      	bge.n	80059c4 <__swhatbuf_r+0x2c>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	2100      	movs	r1, #0
 80059ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059b2:	bf14      	ite	ne
 80059b4:	2340      	movne	r3, #64	@ 0x40
 80059b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80059ba:	2000      	movs	r0, #0
 80059bc:	6031      	str	r1, [r6, #0]
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	b016      	add	sp, #88	@ 0x58
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	466a      	mov	r2, sp
 80059c6:	f000 f849 	bl	8005a5c <_fstat_r>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	dbed      	blt.n	80059aa <__swhatbuf_r+0x12>
 80059ce:	9901      	ldr	r1, [sp, #4]
 80059d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059d8:	4259      	negs	r1, r3
 80059da:	4159      	adcs	r1, r3
 80059dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059e0:	e7eb      	b.n	80059ba <__swhatbuf_r+0x22>

080059e2 <__smakebuf_r>:
 80059e2:	898b      	ldrh	r3, [r1, #12]
 80059e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e6:	079d      	lsls	r5, r3, #30
 80059e8:	4606      	mov	r6, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	d507      	bpl.n	80059fe <__smakebuf_r+0x1c>
 80059ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	2301      	movs	r3, #1
 80059f8:	6163      	str	r3, [r4, #20]
 80059fa:	b003      	add	sp, #12
 80059fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059fe:	466a      	mov	r2, sp
 8005a00:	ab01      	add	r3, sp, #4
 8005a02:	f7ff ffc9 	bl	8005998 <__swhatbuf_r>
 8005a06:	9f00      	ldr	r7, [sp, #0]
 8005a08:	4605      	mov	r5, r0
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7ff fbbd 	bl	800518c <_malloc_r>
 8005a12:	b948      	cbnz	r0, 8005a28 <__smakebuf_r+0x46>
 8005a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a18:	059a      	lsls	r2, r3, #22
 8005a1a:	d4ee      	bmi.n	80059fa <__smakebuf_r+0x18>
 8005a1c:	f023 0303 	bic.w	r3, r3, #3
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	e7e2      	b.n	80059ee <__smakebuf_r+0xc>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	6020      	str	r0, [r4, #0]
 8005a38:	b15b      	cbz	r3, 8005a52 <__smakebuf_r+0x70>
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a40:	f000 f81e 	bl	8005a80 <_isatty_r>
 8005a44:	b128      	cbz	r0, 8005a52 <__smakebuf_r+0x70>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f023 0303 	bic.w	r3, r3, #3
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	431d      	orrs	r5, r3
 8005a56:	81a5      	strh	r5, [r4, #12]
 8005a58:	e7cf      	b.n	80059fa <__smakebuf_r+0x18>
	...

08005a5c <_fstat_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4d06      	ldr	r5, [pc, #24]	@ (8005a7c <_fstat_r+0x20>)
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	f7fc feed 	bl	8002848 <_fstat>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d102      	bne.n	8005a78 <_fstat_r+0x1c>
 8005a72:	682b      	ldr	r3, [r5, #0]
 8005a74:	b103      	cbz	r3, 8005a78 <_fstat_r+0x1c>
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	bd38      	pop	{r3, r4, r5, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20001630 	.word	0x20001630

08005a80 <_isatty_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	2300      	movs	r3, #0
 8005a84:	4d05      	ldr	r5, [pc, #20]	@ (8005a9c <_isatty_r+0x1c>)
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fc feeb 	bl	8002866 <_isatty>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_isatty_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_isatty_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20001630 	.word	0x20001630

08005aa0 <_sbrk_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4d05      	ldr	r5, [pc, #20]	@ (8005abc <_sbrk_r+0x1c>)
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	f7fc fef2 	bl	8002894 <_sbrk>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_sbrk_r+0x1a>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_sbrk_r+0x1a>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	20001630 	.word	0x20001630

08005ac0 <memchr>:
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	b510      	push	{r4, lr}
 8005ac4:	b2c9      	uxtb	r1, r1
 8005ac6:	4402      	add	r2, r0
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	d101      	bne.n	8005ad2 <memchr+0x12>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e003      	b.n	8005ada <memchr+0x1a>
 8005ad2:	7804      	ldrb	r4, [r0, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	428c      	cmp	r4, r1
 8005ad8:	d1f6      	bne.n	8005ac8 <memchr+0x8>
 8005ada:	bd10      	pop	{r4, pc}

08005adc <sqrt>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	f000 f81f 	bl	8005b24 <__ieee754_sqrt>
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	4604      	mov	r4, r0
 8005aea:	460d      	mov	r5, r1
 8005aec:	463b      	mov	r3, r7
 8005aee:	4630      	mov	r0, r6
 8005af0:	4639      	mov	r1, r7
 8005af2:	f7fa ff83 	bl	80009fc <__aeabi_dcmpun>
 8005af6:	b990      	cbnz	r0, 8005b1e <sqrt+0x42>
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa ff54 	bl	80009ac <__aeabi_dcmplt>
 8005b04:	b158      	cbz	r0, 8005b1e <sqrt+0x42>
 8005b06:	f7ff fa9b 	bl	8005040 <__errno>
 8005b0a:	2321      	movs	r3, #33	@ 0x21
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	6003      	str	r3, [r0, #0]
 8005b10:	2300      	movs	r3, #0
 8005b12:	4610      	mov	r0, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	f7fa fe01 	bl	800071c <__aeabi_ddiv>
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	460d      	mov	r5, r1
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b24 <__ieee754_sqrt>:
 8005b24:	4a67      	ldr	r2, [pc, #412]	@ (8005cc4 <__ieee754_sqrt+0x1a0>)
 8005b26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2a:	438a      	bics	r2, r1
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	460f      	mov	r7, r1
 8005b30:	460b      	mov	r3, r1
 8005b32:	4604      	mov	r4, r0
 8005b34:	d10e      	bne.n	8005b54 <__ieee754_sqrt+0x30>
 8005b36:	4602      	mov	r2, r0
 8005b38:	f7fa fcc6 	bl	80004c8 <__aeabi_dmul>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4630      	mov	r0, r6
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa fb0a 	bl	800015c <__adddf3>
 8005b48:	4606      	mov	r6, r0
 8005b4a:	460f      	mov	r7, r1
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	4639      	mov	r1, r7
 8005b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b54:	2900      	cmp	r1, #0
 8005b56:	dc0c      	bgt.n	8005b72 <__ieee754_sqrt+0x4e>
 8005b58:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005b5c:	4302      	orrs	r2, r0
 8005b5e:	d0f5      	beq.n	8005b4c <__ieee754_sqrt+0x28>
 8005b60:	b189      	cbz	r1, 8005b86 <__ieee754_sqrt+0x62>
 8005b62:	4602      	mov	r2, r0
 8005b64:	f7fa faf8 	bl	8000158 <__aeabi_dsub>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	f7fa fdd6 	bl	800071c <__aeabi_ddiv>
 8005b70:	e7ea      	b.n	8005b48 <__ieee754_sqrt+0x24>
 8005b72:	150a      	asrs	r2, r1, #20
 8005b74:	d115      	bne.n	8005ba2 <__ieee754_sqrt+0x7e>
 8005b76:	2100      	movs	r1, #0
 8005b78:	e009      	b.n	8005b8e <__ieee754_sqrt+0x6a>
 8005b7a:	0ae3      	lsrs	r3, r4, #11
 8005b7c:	3a15      	subs	r2, #21
 8005b7e:	0564      	lsls	r4, r4, #21
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0fa      	beq.n	8005b7a <__ieee754_sqrt+0x56>
 8005b84:	e7f7      	b.n	8005b76 <__ieee754_sqrt+0x52>
 8005b86:	460a      	mov	r2, r1
 8005b88:	e7fa      	b.n	8005b80 <__ieee754_sqrt+0x5c>
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	02d8      	lsls	r0, r3, #11
 8005b90:	d5fb      	bpl.n	8005b8a <__ieee754_sqrt+0x66>
 8005b92:	1e48      	subs	r0, r1, #1
 8005b94:	1a12      	subs	r2, r2, r0
 8005b96:	f1c1 0020 	rsb	r0, r1, #32
 8005b9a:	fa24 f000 	lsr.w	r0, r4, r0
 8005b9e:	4303      	orrs	r3, r0
 8005ba0:	408c      	lsls	r4, r1
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005ba8:	2116      	movs	r1, #22
 8005baa:	07d2      	lsls	r2, r2, #31
 8005bac:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bba:	bf5c      	itt	pl
 8005bbc:	005b      	lslpl	r3, r3, #1
 8005bbe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005bc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bc6:	bf58      	it	pl
 8005bc8:	0064      	lslpl	r4, r4, #1
 8005bca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005bce:	107f      	asrs	r7, r7, #1
 8005bd0:	0064      	lsls	r4, r4, #1
 8005bd2:	1815      	adds	r5, r2, r0
 8005bd4:	429d      	cmp	r5, r3
 8005bd6:	bfde      	ittt	le
 8005bd8:	182a      	addle	r2, r5, r0
 8005bda:	1b5b      	suble	r3, r3, r5
 8005bdc:	1836      	addle	r6, r6, r0
 8005bde:	0fe5      	lsrs	r5, r4, #31
 8005be0:	3901      	subs	r1, #1
 8005be2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005be6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005bea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005bee:	d1f0      	bne.n	8005bd2 <__ieee754_sqrt+0xae>
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	f04f 0a20 	mov.w	sl, #32
 8005bf6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	eb01 0c00 	add.w	ip, r1, r0
 8005c00:	db02      	blt.n	8005c08 <__ieee754_sqrt+0xe4>
 8005c02:	d113      	bne.n	8005c2c <__ieee754_sqrt+0x108>
 8005c04:	45a4      	cmp	ip, r4
 8005c06:	d811      	bhi.n	8005c2c <__ieee754_sqrt+0x108>
 8005c08:	f1bc 0f00 	cmp.w	ip, #0
 8005c0c:	eb0c 0100 	add.w	r1, ip, r0
 8005c10:	da42      	bge.n	8005c98 <__ieee754_sqrt+0x174>
 8005c12:	2900      	cmp	r1, #0
 8005c14:	db40      	blt.n	8005c98 <__ieee754_sqrt+0x174>
 8005c16:	f102 0e01 	add.w	lr, r2, #1
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	4672      	mov	r2, lr
 8005c1e:	45a4      	cmp	ip, r4
 8005c20:	bf88      	it	hi
 8005c22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005c26:	eba4 040c 	sub.w	r4, r4, ip
 8005c2a:	4405      	add	r5, r0
 8005c2c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005c30:	f1ba 0a01 	subs.w	sl, sl, #1
 8005c34:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005c38:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005c3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005c40:	d1db      	bne.n	8005bfa <__ieee754_sqrt+0xd6>
 8005c42:	431c      	orrs	r4, r3
 8005c44:	d01a      	beq.n	8005c7c <__ieee754_sqrt+0x158>
 8005c46:	4c20      	ldr	r4, [pc, #128]	@ (8005cc8 <__ieee754_sqrt+0x1a4>)
 8005c48:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8005ccc <__ieee754_sqrt+0x1a8>
 8005c4c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c50:	e9db 2300 	ldrd	r2, r3, [fp]
 8005c54:	f7fa fa80 	bl	8000158 <__aeabi_dsub>
 8005c58:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa feac 	bl	80009c0 <__aeabi_dcmple>
 8005c68:	b140      	cbz	r0, 8005c7c <__ieee754_sqrt+0x158>
 8005c6a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c6e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005c72:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005c76:	d111      	bne.n	8005c9c <__ieee754_sqrt+0x178>
 8005c78:	4655      	mov	r5, sl
 8005c7a:	3601      	adds	r6, #1
 8005c7c:	1072      	asrs	r2, r6, #1
 8005c7e:	086b      	lsrs	r3, r5, #1
 8005c80:	07f1      	lsls	r1, r6, #31
 8005c82:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005c86:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005c8a:	bf48      	it	mi
 8005c8c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005c90:	4618      	mov	r0, r3
 8005c92:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8005c96:	e757      	b.n	8005b48 <__ieee754_sqrt+0x24>
 8005c98:	4696      	mov	lr, r2
 8005c9a:	e7be      	b.n	8005c1a <__ieee754_sqrt+0xf6>
 8005c9c:	f7fa fa5e 	bl	800015c <__adddf3>
 8005ca0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4649      	mov	r1, r9
 8005cac:	f7fa fe7e 	bl	80009ac <__aeabi_dcmplt>
 8005cb0:	b120      	cbz	r0, 8005cbc <__ieee754_sqrt+0x198>
 8005cb2:	1ca8      	adds	r0, r5, #2
 8005cb4:	bf08      	it	eq
 8005cb6:	3601      	addeq	r6, #1
 8005cb8:	3502      	adds	r5, #2
 8005cba:	e7df      	b.n	8005c7c <__ieee754_sqrt+0x158>
 8005cbc:	1c6b      	adds	r3, r5, #1
 8005cbe:	f023 0501 	bic.w	r5, r3, #1
 8005cc2:	e7db      	b.n	8005c7c <__ieee754_sqrt+0x158>
 8005cc4:	7ff00000 	.word	0x7ff00000
 8005cc8:	20000070 	.word	0x20000070
 8005ccc:	20000068 	.word	0x20000068

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
